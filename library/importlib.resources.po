# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-28 23:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/importlib.resources.rst:2
msgid ""
":mod:`!importlib.resources` -- Package resource reading, opening and access"
msgstr ""

#: ../Doc/library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/__init__.py`"
msgstr ""

#: ../Doc/library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*."
msgstr ""

#: ../Doc/library/importlib.resources.rst:16
msgid ""
"\"Resources\" are file-like resources associated with a module or package in "
"Python. The resources may be contained directly in a package, within a "
"subdirectory contained in that package, or adjacent to modules outside a "
"package. Resources may be text or binary. As a result, Python module sources "
"(.py) of a package and compilation artifacts (pycache) are technically de-"
"facto resources of that package. In practice, however, resources are "
"primarily those non-Python artifacts exposed specifically by the package "
"author."
msgstr ""

#: ../Doc/library/importlib.resources.rst:25
msgid "Resources can be opened or read in either binary or text mode."
msgstr ""

#: ../Doc/library/importlib.resources.rst:27
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on the "
"file system: for example, a package and its resources can be imported from a "
"zip file using :py:mod:`zipimport`."
msgstr ""

#: ../Doc/library/importlib.resources.rst:35
msgid ""
"This module provides functionality similar to `pkg_resources <https://"
"setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic Resource "
"Access <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  This "
"makes reading resources included in packages easier, with more stable and "
"consistent semantics."
msgstr ""

#: ../Doc/library/importlib.resources.rst:43
msgid ""
"The standalone backport of this module provides more information on `using "
"importlib.resources <https://importlib-resources.readthedocs.io/en/latest/"
"using.html>`_ and `migrating from pkg_resources to importlib.resources "
"<https://importlib-resources.readthedocs.io/en/latest/migration.html>`_."
msgstr ""

#: ../Doc/library/importlib.resources.rst:49
msgid ""
":class:`Loaders <importlib.abc.Loader>` that wish to support resource "
"reading should implement a ``get_resource_reader(fullname)`` method as "
"specified by :class:`importlib.resources.abc.ResourceReader`."
msgstr ""

#: ../Doc/library/importlib.resources.rst:55
msgid ""
"Represents an anchor for resources, either a :class:`module object <types."
"ModuleType>` or a module name as a string. Defined as ``Union[str, "
"ModuleType]``."
msgstr ""

#: ../Doc/library/importlib.resources.rst:61
msgid ""
"Returns a :class:`~importlib.resources.abc.Traversable` object representing "
"the resource container (think directory) and its resources (think files). A "
"Traversable may contain other containers (think subdirectories)."
msgstr ""

#: ../Doc/library/importlib.resources.rst:66
msgid ""
"*anchor* is an optional :class:`Anchor`. If the anchor is a package, "
"resources are resolved from that package. If a module, resources are "
"resolved adjacent to that module (in the same package or the package root). "
"If the anchor is omitted, the caller's module is used."
msgstr ""

#: ../Doc/library/importlib.resources.rst:74
msgid ""
"*package* parameter was renamed to *anchor*. *anchor* can now be a non-"
"package module and if omitted will default to the caller's module. *package* "
"is still accepted for compatibility but will raise a :exc:"
"`DeprecationWarning`. Consider passing the anchor positionally or using "
"``importlib_resources >= 5.10`` for a compatible interface on older Pythons."
msgstr ""

#: ../Doc/library/importlib.resources.rst:84
msgid ""
"Given a :class:`~importlib.resources.abc.Traversable` object representing a "
"file or directory, typically from :func:`importlib.resources.files`, return "
"a context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""

#: ../Doc/library/importlib.resources.rst:89
msgid ""
"Exiting the context manager cleans up any temporary file or directory "
"created when the resource was extracted from e.g. a zip file."
msgstr ""

#: ../Doc/library/importlib.resources.rst:92
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file or directory on the file system is required."
msgstr ""

#: ../Doc/library/importlib.resources.rst:98
msgid "Added support for *traversable* representing a directory."
msgstr ""

#: ../Doc/library/importlib.resources.rst:105
msgid "Functional API"
msgstr ""

#: ../Doc/library/importlib.resources.rst:107
msgid ""
"A set of simplified, backwards-compatible helpers is available. These allow "
"common operations in a single function call."
msgstr ""

#: ../Doc/library/importlib.resources.rst:110
msgid "For all the following functions:"
msgstr ""

#: ../Doc/library/importlib.resources.rst:112
msgid ""
"*anchor* is an :class:`~importlib.resources.Anchor`, as in :func:`~importlib."
"resources.files`. Unlike in ``files``, it may not be omitted."
msgstr ""

#: ../Doc/library/importlib.resources.rst:116
msgid ""
"*path_names* are components of a resource's path name, relative to the "
"anchor. For example, to get the text of resource named ``info.txt``, use::"
msgstr ""

#: ../Doc/library/importlib.resources.rst:122
msgid ""
"Like :meth:`Traversable.joinpath <importlib.resources.abc.Traversable>`, The "
"individual components should use forward slashes (``/``) as path separators. "
"For example, the following are equivalent::"
msgstr ""

#: ../Doc/library/importlib.resources.rst:130
msgid ""
"For backward compatibility reasons, functions that read text require an "
"explicit *encoding* argument if multiple *path_names* are given. For "
"example, to get the text of ``info/chapter1.txt``, use::"
msgstr ""

#: ../Doc/library/importlib.resources.rst:139
msgid "Open the named resource for binary reading."
msgstr ""

#: ../Doc/library/importlib.resources.rst:141
#: ../Doc/library/importlib.resources.rst:184
#: ../Doc/library/importlib.resources.rst:232
#: ../Doc/library/importlib.resources.rst:249
#: ../Doc/library/importlib.resources.rst:267
msgid ""
"See :ref:`the introduction <importlib_resources_functional>` for details on "
"*anchor* and *path_names*."
msgstr ""

#: ../Doc/library/importlib.resources.rst:144
msgid ""
"This function returns a :class:`~typing.BinaryIO` object, that is, a binary "
"stream open for reading."
msgstr ""

#: ../Doc/library/importlib.resources.rst:147
#: ../Doc/library/importlib.resources.rst:171
#: ../Doc/library/importlib.resources.rst:187
#: ../Doc/library/importlib.resources.rst:208
#: ../Doc/library/importlib.resources.rst:235
#: ../Doc/library/importlib.resources.rst:252
#: ../Doc/library/importlib.resources.rst:270
msgid "This function is roughly equivalent to::"
msgstr ""

#: ../Doc/library/importlib.resources.rst:151
#: ../Doc/library/importlib.resources.rst:191
#: ../Doc/library/importlib.resources.rst:256
msgid "Multiple *path_names* are accepted."
msgstr ""

#: ../Doc/library/importlib.resources.rst:157
msgid ""
"Open the named resource for text reading. By default, the contents are read "
"as strict UTF-8."
msgstr ""

#: ../Doc/library/importlib.resources.rst:160
#: ../Doc/library/importlib.resources.rst:200
msgid ""
"See :ref:`the introduction <importlib_resources_functional>` for details on "
"*anchor* and *path_names*. *encoding* and *errors* have the same meaning as "
"in built-in :func:`open`."
msgstr ""

#: ../Doc/library/importlib.resources.rst:164
#: ../Doc/library/importlib.resources.rst:204
msgid ""
"For backward compatibility reasons, the *encoding* argument must be given "
"explicitly if there are multiple *path_names*. This limitation is scheduled "
"to be removed in Python 3.15."
msgstr ""

#: ../Doc/library/importlib.resources.rst:168
msgid ""
"This function returns a :class:`~typing.TextIO` object, that is, a text "
"stream open for reading."
msgstr ""

#: ../Doc/library/importlib.resources.rst:175
#: ../Doc/library/importlib.resources.rst:212
#: ../Doc/library/importlib.resources.rst:239
msgid ""
"Multiple *path_names* are accepted. *encoding* and *errors* must be given as "
"keyword arguments."
msgstr ""

#: ../Doc/library/importlib.resources.rst:182
msgid "Read and return the contents of the named resource as :class:`bytes`."
msgstr ""

#: ../Doc/library/importlib.resources.rst:197
msgid ""
"Read and return the contents of the named resource as :class:`str`. By "
"default, the contents are read as strict UTF-8."
msgstr ""

#: ../Doc/library/importlib.resources.rst:219
msgid ""
"Provides the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` statement. "
"The context manager provides a :class:`pathlib.Path` object."
msgstr ""

#: ../Doc/library/importlib.resources.rst:223
msgid ""
"Exiting the context manager cleans up any temporary files created, e.g. when "
"the resource needs to be extracted from a zip file."
msgstr ""

#: ../Doc/library/importlib.resources.rst:226
msgid ""
"For example, the :meth:`~pathlib.Path.stat` method requires an actual file "
"system path; it can be used like this::"
msgstr ""

#: ../Doc/library/importlib.resources.rst:246
msgid ""
"Return ``True`` if the named resource exists, otherwise ``False``. This "
"function does not consider directories to be resources."
msgstr ""

#: ../Doc/library/importlib.resources.rst:262
msgid ""
"Return an iterable over the named items within the package or path. The "
"iterable returns names of resources (e.g. files) and non-resources (e.g. "
"directories) as :class:`str`. The iterable does not recurse into "
"subdirectories."
msgstr ""

#: ../Doc/library/importlib.resources.rst:275
msgid ""
"Prefer ``iterdir()`` as above, which offers more control over the results "
"and richer functionality."
msgstr ""

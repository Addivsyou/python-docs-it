# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-28 23:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

#: ../Doc/c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :c:type:`PyTypeObject` "
"structure.  Type objects can be handled using any of the ``PyObject_*`` or "
"``PyType_*`` functions, but do not offer much that's interesting to most "
"Python applications. These objects are fundamental to how objects behave, so "
"they are very important to the interpreter itself and to any extension "
"module that implements new types."
msgstr ""

#: ../Doc/c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of "
"the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""

#: ../Doc/c-api/typeobj.rst:23
msgid ""
"In addition to the following quick reference, the :ref:`typedef-examples` "
"section provides at-a-glance insight into the meaning and use of :c:type:"
"`PyTypeObject`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:29
msgid "Quick Reference"
msgstr ""

#: ../Doc/c-api/typeobj.rst:34
msgid "\"tp slots\""
msgstr ""

#: ../Doc/c-api/typeobj.rst:40
msgid "PyTypeObject Slot [#slots]_"
msgstr ""

#: ../Doc/c-api/typeobj.rst:40 ../Doc/c-api/typeobj.rst:201
msgid ":ref:`Type <slot-typedefs-table>`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:40
msgid "special methods/attrs"
msgstr ""

#: ../Doc/c-api/typeobj.rst:40
msgid "Info [#cols]_"
msgstr ""

#: ../Doc/c-api/typeobj.rst:42
msgid "O"
msgstr ""

#: ../Doc/c-api/typeobj.rst:42
msgid "T"
msgstr ""

#: ../Doc/c-api/typeobj.rst:42
msgid "D"
msgstr ""

#: ../Doc/c-api/typeobj.rst:42
msgid "I"
msgstr ""

#: ../Doc/c-api/typeobj.rst:44
msgid "<R> :c:member:`~PyTypeObject.tp_name`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:44
#: ../Doc/c-api/typeobj.rst:86
msgid "const char *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:44
msgid "__name__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:44 ../Doc/c-api/typeobj.rst:46
#: ../Doc/c-api/typeobj.rst:48 ../Doc/c-api/typeobj.rst:50
#: ../Doc/c-api/typeobj.rst:52 ../Doc/c-api/typeobj.rst:62
#: ../Doc/c-api/typeobj.rst:70 ../Doc/c-api/typeobj.rst:72
#: ../Doc/c-api/typeobj.rst:74 ../Doc/c-api/typeobj.rst:76
#: ../Doc/c-api/typeobj.rst:79 ../Doc/c-api/typeobj.rst:84
#: ../Doc/c-api/typeobj.rst:86 ../Doc/c-api/typeobj.rst:88
#: ../Doc/c-api/typeobj.rst:90 ../Doc/c-api/typeobj.rst:92
#: ../Doc/c-api/typeobj.rst:99 ../Doc/c-api/typeobj.rst:101
#: ../Doc/c-api/typeobj.rst:103 ../Doc/c-api/typeobj.rst:105
#: ../Doc/c-api/typeobj.rst:107 ../Doc/c-api/typeobj.rst:109
#: ../Doc/c-api/typeobj.rst:111 ../Doc/c-api/typeobj.rst:115
#: ../Doc/c-api/typeobj.rst:117 ../Doc/c-api/typeobj.rst:120
#: ../Doc/c-api/typeobj.rst:122 ../Doc/c-api/typeobj.rst:124
#: ../Doc/c-api/typeobj.rst:126 ../Doc/c-api/typeobj.rst:128
#: ../Doc/c-api/typeobj.rst:130 ../Doc/c-api/typeobj.rst:146
msgid "X"
msgstr ""

#: ../Doc/c-api/typeobj.rst:46
msgid ":c:member:`~PyTypeObject.tp_basicsize`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:46
#: ../Doc/c-api/typeobj.rst:48 ../Doc/c-api/typeobj.rst:52
#: ../Doc/c-api/typeobj.rst:99 ../Doc/c-api/typeobj.rst:120
#: ../Doc/c-api/typeobj.rst:416
msgid ":c:type:`Py_ssize_t`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:48
msgid ":c:member:`~PyTypeObject.tp_itemsize`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:50
msgid ":c:member:`~PyTypeObject.tp_dealloc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:50 ../Doc/c-api/typeobj.rst:142
#: ../Doc/c-api/typeobj.rst:146 ../Doc/c-api/typeobj.rst:346
msgid ":c:type:`destructor`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:52
msgid ":c:member:`~PyTypeObject.tp_vectorcall_offset`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:54
msgid "(:c:member:`~PyTypeObject.tp_getattr`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:54 ../Doc/c-api/typeobj.rst:370
msgid ":c:type:`getattrfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:54 ../Doc/c-api/typeobj.rst:76
msgid "__getattribute__, __getattr__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:54 ../Doc/c-api/typeobj.rst:57
#: ../Doc/c-api/typeobj.rst:70 ../Doc/c-api/typeobj.rst:76
#: ../Doc/c-api/typeobj.rst:79 ../Doc/c-api/typeobj.rst:88
#: ../Doc/c-api/typeobj.rst:90 ../Doc/c-api/typeobj.rst:92
msgid "G"
msgstr ""

#: ../Doc/c-api/typeobj.rst:57
msgid "(:c:member:`~PyTypeObject.tp_setattr`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:57 ../Doc/c-api/typeobj.rst:375
msgid ":c:type:`setattrfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:57 ../Doc/c-api/typeobj.rst:79
msgid "__setattr__, __delattr__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:60
msgid ":c:member:`~PyTypeObject.tp_as_async`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:60
msgid ":c:type:`PyAsyncMethods` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:60 ../Doc/c-api/typeobj.rst:64
#: ../Doc/c-api/typeobj.rst:66 ../Doc/c-api/typeobj.rst:68
msgid ":ref:`sub-slots`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:60 ../Doc/c-api/typeobj.rst:64
#: ../Doc/c-api/typeobj.rst:66 ../Doc/c-api/typeobj.rst:68
#: ../Doc/c-api/typeobj.rst:82
msgid "%"
msgstr ""

#: ../Doc/c-api/typeobj.rst:62
msgid ":c:member:`~PyTypeObject.tp_repr`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:62 ../Doc/c-api/typeobj.rst:74
#: ../Doc/c-api/typeobj.rst:368
msgid ":c:type:`reprfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:62
msgid "__repr__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:64
msgid ":c:member:`~PyTypeObject.tp_as_number`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:64
msgid ":c:type:`PyNumberMethods` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:66
msgid ":c:member:`~PyTypeObject.tp_as_sequence`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:66
msgid ":c:type:`PySequenceMethods` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:68
msgid ":c:member:`~PyTypeObject.tp_as_mapping`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:68
msgid ":c:type:`PyMappingMethods` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:70
msgid ":c:member:`~PyTypeObject.tp_hash`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:70 ../Doc/c-api/typeobj.rst:404
msgid ":c:type:`hashfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:70
msgid "__hash__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:72
msgid ":c:member:`~PyTypeObject.tp_call`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:72 ../Doc/c-api/typeobj.rst:237
#: ../Doc/c-api/typeobj.rst:240 ../Doc/c-api/typeobj.rst:440
msgid ":c:type:`ternaryfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:72
msgid "__call__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:74
msgid ":c:member:`~PyTypeObject.tp_str`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:74
msgid "__str__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:76
msgid ":c:member:`~PyTypeObject.tp_getattro`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:76 ../Doc/c-api/typeobj.rst:381
msgid ":c:type:`getattrofunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:79
msgid ":c:member:`~PyTypeObject.tp_setattro`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:79 ../Doc/c-api/typeobj.rst:386
msgid ":c:type:`setattrofunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:82
msgid ":c:member:`~PyTypeObject.tp_as_buffer`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:82
msgid ":c:type:`PyBufferProcs` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:84
msgid ":c:member:`~PyTypeObject.tp_flags`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:84
msgid "unsigned long"
msgstr ""

#: ../Doc/c-api/typeobj.rst:84 ../Doc/c-api/typeobj.rst:99
#: ../Doc/c-api/typeobj.rst:113 ../Doc/c-api/typeobj.rst:120
#: ../Doc/c-api/typeobj.rst:124 ../Doc/c-api/typeobj.rst:126
#: ../Doc/c-api/typeobj.rst:128
msgid "?"
msgstr ""

#: ../Doc/c-api/typeobj.rst:86
msgid ":c:member:`~PyTypeObject.tp_doc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:86
msgid "__doc__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:88
msgid ":c:member:`~PyTypeObject.tp_traverse`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:88 ../Doc/c-api/typeobj.rst:350
msgid ":c:type:`traverseproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:90
msgid ":c:member:`~PyTypeObject.tp_clear`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:90 ../Doc/c-api/typeobj.rst:130
#: ../Doc/c-api/typeobj.rst:248 ../Doc/c-api/typeobj.rst:429
msgid ":c:type:`inquiry`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:92
msgid ":c:member:`~PyTypeObject.tp_richcompare`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:92 ../Doc/c-api/typeobj.rst:406
msgid ":c:type:`richcmpfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:92
msgid "__lt__, __le__, __eq__, __ne__, __gt__, __ge__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:99
msgid "(:c:member:`~PyTypeObject.tp_weaklistoffset`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:101
msgid ":c:member:`~PyTypeObject.tp_iter`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:101 ../Doc/c-api/typeobj.rst:412
msgid ":c:type:`getiterfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:101
msgid "__iter__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:103
msgid ":c:member:`~PyTypeObject.tp_iternext`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:103 ../Doc/c-api/typeobj.rst:414
msgid ":c:type:`iternextfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:103
msgid "__next__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:105
msgid ":c:member:`~PyTypeObject.tp_methods`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:105
msgid ":c:type:`PyMethodDef` []"
msgstr ""

#: ../Doc/c-api/typeobj.rst:107
msgid ":c:member:`~PyTypeObject.tp_members`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:107
msgid ":c:type:`PyMemberDef` []"
msgstr ""

#: ../Doc/c-api/typeobj.rst:109
msgid ":c:member:`~PyTypeObject.tp_getset`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:109
msgid ":c:type:`PyGetSetDef` []"
msgstr ""

#: ../Doc/c-api/typeobj.rst:111
msgid ":c:member:`~PyTypeObject.tp_base`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:111
msgid ":c:type:`PyTypeObject` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:111
msgid "__base__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:113
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:113
#: ../Doc/c-api/typeobj.rst:132 ../Doc/c-api/typeobj.rst:134
#: ../Doc/c-api/typeobj.rst:136 ../Doc/c-api/typeobj.rst:140
#: ../Doc/c-api/typeobj.rst:341 ../Doc/c-api/typeobj.rst:346
#: ../Doc/c-api/typeobj.rst:356 ../Doc/c-api/typeobj.rst:368
#: ../Doc/c-api/typeobj.rst:370 ../Doc/c-api/typeobj.rst:381
#: ../Doc/c-api/typeobj.rst:392 ../Doc/c-api/typeobj.rst:404
#: ../Doc/c-api/typeobj.rst:406 ../Doc/c-api/typeobj.rst:412
#: ../Doc/c-api/typeobj.rst:414 ../Doc/c-api/typeobj.rst:416
#: ../Doc/c-api/typeobj.rst:429 ../Doc/c-api/typeobj.rst:431
#: ../Doc/c-api/typeobj.rst:435 ../Doc/c-api/typeobj.rst:440
#: ../Doc/c-api/typeobj.rst:446
msgid ":c:type:`PyObject` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:113
msgid "__dict__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:115
msgid ":c:member:`~PyTypeObject.tp_descr_get`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:115 ../Doc/c-api/typeobj.rst:392
msgid ":c:type:`descrgetfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:115
msgid "__get__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:117
msgid ":c:member:`~PyTypeObject.tp_descr_set`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:117 ../Doc/c-api/typeobj.rst:398
msgid ":c:type:`descrsetfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:117
msgid "__set__, __delete__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:120
msgid "(:c:member:`~PyTypeObject.tp_dictoffset`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:122
msgid ":c:member:`~PyTypeObject.tp_init`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:122 ../Doc/c-api/typeobj.rst:362
msgid ":c:type:`initproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:122
msgid "__init__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:124
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:124 ../Doc/c-api/typeobj.rst:341
msgid ":c:type:`allocfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:126
msgid ":c:member:`~PyTypeObject.tp_new`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:126 ../Doc/c-api/typeobj.rst:356
msgid ":c:type:`newfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:126
msgid "__new__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:128
msgid ":c:member:`~PyTypeObject.tp_free`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:128 ../Doc/c-api/typeobj.rst:348
msgid ":c:type:`freefunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:130
msgid ":c:member:`~PyTypeObject.tp_is_gc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:132
msgid "<:c:member:`~PyTypeObject.tp_bases`>"
msgstr ""

#: ../Doc/c-api/typeobj.rst:132
msgid "__bases__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:132 ../Doc/c-api/typeobj.rst:134
msgid "~"
msgstr ""

#: ../Doc/c-api/typeobj.rst:134
msgid "<:c:member:`~PyTypeObject.tp_mro`>"
msgstr ""

#: ../Doc/c-api/typeobj.rst:134
msgid "__mro__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:136
msgid "[:c:member:`~PyTypeObject.tp_cache`]"
msgstr ""

#: ../Doc/c-api/typeobj.rst:138
msgid "[:c:member:`~PyTypeObject.tp_subclasses`]"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:138
#: ../Doc/c-api/typeobj.rst:279 ../Doc/c-api/typeobj.rst:348
msgid "void *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:138
msgid "__subclasses__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:140
msgid "[:c:member:`~PyTypeObject.tp_weaklist`]"
msgstr ""

#: ../Doc/c-api/typeobj.rst:142
msgid "(:c:member:`~PyTypeObject.tp_del`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:144
msgid "[:c:member:`~PyTypeObject.tp_version_tag`]"
msgstr ""

#: ../Doc/c-api/typeobj.rst:144
msgid "unsigned int"
msgstr ""

#: ../Doc/c-api/typeobj.rst:146
msgid ":c:member:`~PyTypeObject.tp_finalize`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:146
msgid "__del__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:148
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:148
msgid ":c:type:`vectorcallfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:150
msgid "[:c:member:`~PyTypeObject.tp_watched`]"
msgstr ""

#: ../Doc/c-api/typeobj.rst:150
msgid "unsigned char"
msgstr ""

#: ../Doc/c-api/typeobj.rst:155
msgid ""
"**()**: A slot name in parentheses indicates it is (effectively) deprecated."
msgstr ""

#: ../Doc/c-api/typeobj.rst:157
msgid ""
"**<>**: Names in angle brackets should be initially set to ``NULL`` and "
"treated as read-only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:160
msgid "**[]**: Names in square brackets are for internal use only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:162
msgid ""
"**<R>** (as a prefix) means the field is required (must be non-``NULL``)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:164
msgid "Columns:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:166
msgid "**\"O\"**:  set on :c:data:`PyBaseObject_Type`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:168
msgid "**\"T\"**:  set on :c:data:`PyType_Type`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:170
msgid "**\"D\"**:  default (if slot is set to ``NULL``)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:180
msgid "**\"I\"**:  inheritance"
msgstr ""

#: ../Doc/c-api/typeobj.rst:189
msgid ""
"Note that some slots are effectively inherited through the normal attribute "
"lookup chain."
msgstr ""

#: ../Doc/c-api/typeobj.rst:195
msgid "sub-slots"
msgstr ""

#: ../Doc/c-api/typeobj.rst:201
msgid "Slot"
msgstr ""

#: ../Doc/c-api/typeobj.rst:201
msgid "special methods"
msgstr ""

#: ../Doc/c-api/typeobj.rst:204
msgid ":c:member:`~PyAsyncMethods.am_await`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:204 ../Doc/c-api/typeobj.rst:206
#: ../Doc/c-api/typeobj.rst:208 ../Doc/c-api/typeobj.rst:242
#: ../Doc/c-api/typeobj.rst:244 ../Doc/c-api/typeobj.rst:246
#: ../Doc/c-api/typeobj.rst:250 ../Doc/c-api/typeobj.rst:277
#: ../Doc/c-api/typeobj.rst:281 ../Doc/c-api/typeobj.rst:291
#: ../Doc/c-api/typeobj.rst:431
msgid ":c:type:`unaryfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:204
msgid "__await__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:206
msgid ":c:member:`~PyAsyncMethods.am_aiter`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:206
msgid "__aiter__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:208
msgid ":c:member:`~PyAsyncMethods.am_anext`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:208
msgid "__anext__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:210
msgid ":c:member:`~PyAsyncMethods.am_send`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:210
msgid ":c:type:`sendfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:214
msgid ":c:member:`~PyNumberMethods.nb_add`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:214 ../Doc/c-api/typeobj.rst:217
#: ../Doc/c-api/typeobj.rst:219 ../Doc/c-api/typeobj.rst:222
#: ../Doc/c-api/typeobj.rst:224 ../Doc/c-api/typeobj.rst:227
#: ../Doc/c-api/typeobj.rst:229 ../Doc/c-api/typeobj.rst:232
#: ../Doc/c-api/typeobj.rst:234 ../Doc/c-api/typeobj.rst:252
#: ../Doc/c-api/typeobj.rst:255 ../Doc/c-api/typeobj.rst:257
#: ../Doc/c-api/typeobj.rst:260 ../Doc/c-api/typeobj.rst:262
#: ../Doc/c-api/typeobj.rst:265 ../Doc/c-api/typeobj.rst:267
#: ../Doc/c-api/typeobj.rst:270 ../Doc/c-api/typeobj.rst:272
#: ../Doc/c-api/typeobj.rst:275 ../Doc/c-api/typeobj.rst:283
#: ../Doc/c-api/typeobj.rst:285 ../Doc/c-api/typeobj.rst:287
#: ../Doc/c-api/typeobj.rst:289 ../Doc/c-api/typeobj.rst:293
#: ../Doc/c-api/typeobj.rst:296 ../Doc/c-api/typeobj.rst:302
#: ../Doc/c-api/typeobj.rst:311 ../Doc/c-api/typeobj.rst:322
#: ../Doc/c-api/typeobj.rst:435
msgid ":c:type:`binaryfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:214
msgid "__add__ __radd__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:217
msgid ":c:member:`~PyNumberMethods.nb_inplace_add`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:217 ../Doc/c-api/typeobj.rst:322
msgid "__iadd__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:219
msgid ":c:member:`~PyNumberMethods.nb_subtract`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:219
msgid "__sub__ __rsub__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:222
msgid ":c:member:`~PyNumberMethods.nb_inplace_subtract`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:222
msgid "__isub__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:224
msgid ":c:member:`~PyNumberMethods.nb_multiply`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:224
msgid "__mul__ __rmul__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:227
msgid ":c:member:`~PyNumberMethods.nb_inplace_multiply`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:227 ../Doc/c-api/typeobj.rst:324
msgid "__imul__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:229
msgid ":c:member:`~PyNumberMethods.nb_remainder`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:229
msgid "__mod__ __rmod__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:232
msgid ":c:member:`~PyNumberMethods.nb_inplace_remainder`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:232
msgid "__imod__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:234
msgid ":c:member:`~PyNumberMethods.nb_divmod`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:234
msgid "__divmod__ __rdivmod__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:237
msgid ":c:member:`~PyNumberMethods.nb_power`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:237
msgid "__pow__ __rpow__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:240
msgid ":c:member:`~PyNumberMethods.nb_inplace_power`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:240
msgid "__ipow__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:242
msgid ":c:member:`~PyNumberMethods.nb_negative`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:242
msgid "__neg__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:244
msgid ":c:member:`~PyNumberMethods.nb_positive`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:244
msgid "__pos__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:246
msgid ":c:member:`~PyNumberMethods.nb_absolute`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:246
msgid "__abs__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:248
msgid ":c:member:`~PyNumberMethods.nb_bool`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:248
msgid "__bool__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:250
msgid ":c:member:`~PyNumberMethods.nb_invert`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:250
msgid "__invert__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:252
msgid ":c:member:`~PyNumberMethods.nb_lshift`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:252
msgid "__lshift__ __rlshift__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:255
msgid ":c:member:`~PyNumberMethods.nb_inplace_lshift`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:255
msgid "__ilshift__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:257
msgid ":c:member:`~PyNumberMethods.nb_rshift`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:257
msgid "__rshift__ __rrshift__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:260
msgid ":c:member:`~PyNumberMethods.nb_inplace_rshift`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:260
msgid "__irshift__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:262
msgid ":c:member:`~PyNumberMethods.nb_and`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:262
msgid "__and__ __rand__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:265
msgid ":c:member:`~PyNumberMethods.nb_inplace_and`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:265
msgid "__iand__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:267
msgid ":c:member:`~PyNumberMethods.nb_xor`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:267
msgid "__xor__ __rxor__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:270
msgid ":c:member:`~PyNumberMethods.nb_inplace_xor`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:270
msgid "__ixor__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:272
msgid ":c:member:`~PyNumberMethods.nb_or`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:272
msgid "__or__ __ror__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:275
msgid ":c:member:`~PyNumberMethods.nb_inplace_or`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:275
msgid "__ior__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:277
msgid ":c:member:`~PyNumberMethods.nb_int`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:277
msgid "__int__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:279
msgid ":c:member:`~PyNumberMethods.nb_reserved`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:281
msgid ":c:member:`~PyNumberMethods.nb_float`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:281
msgid "__float__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:283
msgid ":c:member:`~PyNumberMethods.nb_floor_divide`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:283
msgid "__floordiv__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:285
msgid ":c:member:`~PyNumberMethods.nb_inplace_floor_divide`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:285
msgid "__ifloordiv__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:287
msgid ":c:member:`~PyNumberMethods.nb_true_divide`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:287
msgid "__truediv__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:289
msgid ":c:member:`~PyNumberMethods.nb_inplace_true_divide`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:289
msgid "__itruediv__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:291
msgid ":c:member:`~PyNumberMethods.nb_index`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:291
msgid "__index__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:293
msgid ":c:member:`~PyNumberMethods.nb_matrix_multiply`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:293
msgid "__matmul__ __rmatmul__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:296
msgid ":c:member:`~PyNumberMethods.nb_inplace_matrix_multiply`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:296
msgid "__imatmul__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:300
msgid ":c:member:`~PyMappingMethods.mp_length`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:300 ../Doc/c-api/typeobj.rst:309
#: ../Doc/c-api/typeobj.rst:416
msgid ":c:type:`lenfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:300 ../Doc/c-api/typeobj.rst:309
msgid "__len__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:302
msgid ":c:member:`~PyMappingMethods.mp_subscript`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:302 ../Doc/c-api/typeobj.rst:315
msgid "__getitem__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:304
msgid ":c:member:`~PyMappingMethods.mp_ass_subscript`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:304 ../Doc/c-api/typeobj.rst:462
msgid ":c:type:`objobjargproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:304
msgid "__setitem__, __delitem__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:309
msgid ":c:member:`~PySequenceMethods.sq_length`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:311
msgid ":c:member:`~PySequenceMethods.sq_concat`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:311
msgid "__add__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:313
msgid ":c:member:`~PySequenceMethods.sq_repeat`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:313 ../Doc/c-api/typeobj.rst:315
#: ../Doc/c-api/typeobj.rst:324 ../Doc/c-api/typeobj.rst:446
msgid ":c:type:`ssizeargfunc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:313
msgid "__mul__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:315
msgid ":c:member:`~PySequenceMethods.sq_item`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:317
msgid ":c:member:`~PySequenceMethods.sq_ass_item`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:317 ../Doc/c-api/typeobj.rst:451
msgid ":c:type:`ssizeobjargproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:317
msgid "__setitem__ __delitem__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:320
msgid ":c:member:`~PySequenceMethods.sq_contains`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:320 ../Doc/c-api/typeobj.rst:457
msgid ":c:type:`objobjproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:320
msgid "__contains__"
msgstr ""

#: ../Doc/c-api/typeobj.rst:322
msgid ":c:member:`~PySequenceMethods.sq_inplace_concat`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:324
msgid ":c:member:`~PySequenceMethods.sq_inplace_repeat`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:328
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:328
msgid ":c:func:`getbufferproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:330
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:330
msgid ":c:func:`releasebufferproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:336
msgid "slot typedefs"
msgstr ""

#: ../Doc/c-api/typeobj.rst:339
msgid "typedef"
msgstr ""

#: ../Doc/c-api/typeobj.rst:339
msgid "Parameter Types"
msgstr ""

#: ../Doc/c-api/typeobj.rst:339
msgid "Return Type"
msgstr ""

#: ../Doc/c-api/typeobj.rst:346 ../Doc/c-api/typeobj.rst:348
#: ../Doc/c-api/typeobj.rst:424
msgid "void"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0
msgid ":c:type:`visitproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0 ../Doc/c-api/typeobj.rst:350
#: ../Doc/c-api/typeobj.rst:362 ../Doc/c-api/typeobj.rst:375
#: ../Doc/c-api/typeobj.rst:386 ../Doc/c-api/typeobj.rst:398
#: ../Doc/c-api/typeobj.rst:418 ../Doc/c-api/typeobj.rst:429
#: ../Doc/c-api/typeobj.rst:451 ../Doc/c-api/typeobj.rst:457
#: ../Doc/c-api/typeobj.rst:462
msgid "int"
msgstr ""

#: ../Doc/c-api/typeobj.rst:404
msgid "Py_hash_t"
msgstr ""

#: ../Doc/c-api/typeobj.rst:418
msgid ":c:type:`getbufferproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:0
msgid ":c:type:`Py_buffer` *"
msgstr ""

#: ../Doc/c-api/typeobj.rst:424
msgid ":c:type:`releasebufferproc`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:469
msgid "See :ref:`slot-typedefs` below for more detail."
msgstr ""

#: ../Doc/c-api/typeobj.rst:473
msgid "PyTypeObject Definition"
msgstr ""

#: ../Doc/c-api/typeobj.rst:475
msgid ""
"The structure definition for :c:type:`PyTypeObject` can be found in :file:"
"`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:485
msgid "PyObject Slots"
msgstr ""

#: ../Doc/c-api/typeobj.rst:487
msgid ""
"The type object structure extends the :c:type:`PyVarObject` structure. The :"
"c:member:`~PyVarObject.ob_size` field is used for dynamic types (created by :"
"c:func:`!type_new`, usually called from a class statement). Note that :c:"
"data:`PyType_Type` (the metatype) initializes :c:member:`~PyTypeObject."
"tp_itemsize`, which means that its instances (i.e. type objects) *must* have "
"the :c:member:`~PyVarObject.ob_size` field."
msgstr ""

#: ../Doc/c-api/typeobj.rst:496
msgid ""
"This is the type object's reference count, initialized to ``1`` by the "
"``PyObject_HEAD_INIT`` macro.  Note that for :ref:`statically allocated type "
"objects <static-types>`, the type's instances (objects whose :c:member:"
"`~PyObject.ob_type` points back to the type) do *not* count as references.  "
"But for :ref:`dynamically allocated type objects <heap-types>`, the "
"instances *do* count as references."
msgstr ""

#: ../Doc/c-api/typeobj.rst:503 ../Doc/c-api/typeobj.rst:526
#: ../Doc/c-api/typeobj.rst:540 ../Doc/c-api/typeobj.rst:584
#: ../Doc/c-api/typeobj.rst:627 ../Doc/c-api/typeobj.rst:686
#: ../Doc/c-api/typeobj.rst:727 ../Doc/c-api/typeobj.rst:744
#: ../Doc/c-api/typeobj.rst:761 ../Doc/c-api/typeobj.rst:779
#: ../Doc/c-api/typeobj.rst:803 ../Doc/c-api/typeobj.rst:820
#: ../Doc/c-api/typeobj.rst:832 ../Doc/c-api/typeobj.rst:844
#: ../Doc/c-api/typeobj.rst:877 ../Doc/c-api/typeobj.rst:899
#: ../Doc/c-api/typeobj.rst:919 ../Doc/c-api/typeobj.rst:940
#: ../Doc/c-api/typeobj.rst:966 ../Doc/c-api/typeobj.rst:985
#: ../Doc/c-api/typeobj.rst:1001 ../Doc/c-api/typeobj.rst:1040
#: ../Doc/c-api/typeobj.rst:1051 ../Doc/c-api/typeobj.rst:1061
#: ../Doc/c-api/typeobj.rst:1071 ../Doc/c-api/typeobj.rst:1085
#: ../Doc/c-api/typeobj.rst:1103 ../Doc/c-api/typeobj.rst:1126
#: ../Doc/c-api/typeobj.rst:1144 ../Doc/c-api/typeobj.rst:1157
#: ../Doc/c-api/typeobj.rst:1179 ../Doc/c-api/typeobj.rst:1223
#: ../Doc/c-api/typeobj.rst:1244 ../Doc/c-api/typeobj.rst:1263
#: ../Doc/c-api/typeobj.rst:1293 ../Doc/c-api/typeobj.rst:1315
#: ../Doc/c-api/typeobj.rst:1341 ../Doc/c-api/typeobj.rst:1426
#: ../Doc/c-api/typeobj.rst:1500 ../Doc/c-api/typeobj.rst:1561
#: ../Doc/c-api/typeobj.rst:1597 ../Doc/c-api/typeobj.rst:1622
#: ../Doc/c-api/typeobj.rst:1645 ../Doc/c-api/typeobj.rst:1658
#: ../Doc/c-api/typeobj.rst:1673 ../Doc/c-api/typeobj.rst:1687
#: ../Doc/c-api/typeobj.rst:1717 ../Doc/c-api/typeobj.rst:1749
#: ../Doc/c-api/typeobj.rst:1775 ../Doc/c-api/typeobj.rst:1793
#: ../Doc/c-api/typeobj.rst:1822 ../Doc/c-api/typeobj.rst:1866
#: ../Doc/c-api/typeobj.rst:1883 ../Doc/c-api/typeobj.rst:1924
#: ../Doc/c-api/typeobj.rst:1946 ../Doc/c-api/typeobj.rst:1978
#: ../Doc/c-api/typeobj.rst:2006 ../Doc/c-api/typeobj.rst:2019
#: ../Doc/c-api/typeobj.rst:2029 ../Doc/c-api/typeobj.rst:2046
#: ../Doc/c-api/typeobj.rst:2063 ../Doc/c-api/typeobj.rst:2077
#: ../Doc/c-api/typeobj.rst:2123 ../Doc/c-api/typeobj.rst:2146
msgid "**Inheritance:**"
msgstr ""

#: ../Doc/c-api/typeobj.rst:505 ../Doc/c-api/typeobj.rst:542
#: ../Doc/c-api/typeobj.rst:586
msgid "This field is not inherited by subtypes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:510
msgid ""
"This is the type's type, in other words its metatype.  It is initialized by "
"the argument to the ``PyObject_HEAD_INIT`` macro, and its value should "
"normally be ``&PyType_Type``.  However, for dynamically loadable extension "
"modules that must be usable on Windows (at least), the compiler complains "
"that this is not a valid initializer.  Therefore, the convention is to pass "
"``NULL`` to the ``PyObject_HEAD_INIT`` macro and to initialize this field "
"explicitly at the start of the module's initialization function, before "
"doing anything else.  This is typically done like this::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:521
msgid ""
"This should be done before any instances of the type are created. :c:func:"
"`PyType_Ready` checks if :c:member:`~PyObject.ob_type` is ``NULL``, and if "
"so, initializes it to the :c:member:`~PyObject.ob_type` field of the base "
"class. :c:func:`PyType_Ready` will not change this field if it is non-zero."
msgstr ""

#: ../Doc/c-api/typeobj.rst:528 ../Doc/c-api/typeobj.rst:688
#: ../Doc/c-api/typeobj.rst:805 ../Doc/c-api/typeobj.rst:901
#: ../Doc/c-api/typeobj.rst:921 ../Doc/c-api/typeobj.rst:1624
#: ../Doc/c-api/typeobj.rst:1647 ../Doc/c-api/typeobj.rst:1777
#: ../Doc/c-api/typeobj.rst:1795 ../Doc/c-api/typeobj.rst:1868
#: ../Doc/c-api/typeobj.rst:1980 ../Doc/c-api/typeobj.rst:2125
msgid "This field is inherited by subtypes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:532
msgid "PyVarObject Slots"
msgstr ""

#: ../Doc/c-api/typeobj.rst:536
msgid ""
"For :ref:`statically allocated type objects <static-types>`, this should be "
"initialized to zero. For :ref:`dynamically allocated type objects <heap-"
"types>`, this field has a special internal meaning."
msgstr ""

#: ../Doc/c-api/typeobj.rst:546
msgid "PyTypeObject Slots"
msgstr ""

#: ../Doc/c-api/typeobj.rst:548
msgid ""
"Each slot has a section describing inheritance.  If :c:func:`PyType_Ready` "
"may set a value when the field is set to ``NULL`` then there will also be a "
"\"Default\" section.  (Note that many fields set on :c:data:"
"`PyBaseObject_Type` and :c:data:`PyType_Type` effectively act as defaults.)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:555
msgid ""
"Pointer to a NUL-terminated string containing the name of the type. For "
"types that are accessible as module globals, the string should be the full "
"module name, followed by a dot, followed by the type name; for built-in "
"types, it should be just the type name.  If the module is a submodule of a "
"package, the full package name is part of the full module name.  For "
"example, a type named :class:`!T` defined in module :mod:`!M` in subpackage :"
"mod:`!Q` in package :mod:`!P` should have the :c:member:`~PyTypeObject."
"tp_name` initializer ``\"P.Q.M.T\"``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:563
msgid ""
"For :ref:`dynamically allocated type objects <heap-types>`, this should just "
"be the type name, and the module name explicitly stored in the type dict as "
"the value for key ``'__module__'``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:568
msgid ""
"For :ref:`statically allocated type objects <static-types>`, the *tp_name* "
"field should contain a dot. Everything before the last dot is made "
"accessible as the :attr:`__module__` attribute, and everything after the "
"last dot is made accessible as the :attr:`~definition.__name__` attribute."
msgstr ""

#: ../Doc/c-api/typeobj.rst:574
msgid ""
"If no dot is present, the entire :c:member:`~PyTypeObject.tp_name` field is "
"made accessible as the :attr:`~definition.__name__` attribute, and the :attr:"
"`__module__` attribute is undefined (unless explicitly set in the "
"dictionary, as explained above).  This means your type will be impossible to "
"pickle.  Additionally, it will not be listed in module documentations "
"created with pydoc."
msgstr ""

#: ../Doc/c-api/typeobj.rst:580
msgid ""
"This field must not be ``NULL``.  It is the only required field in :c:func:"
"`PyTypeObject` (other than potentially :c:member:`~PyTypeObject."
"tp_itemsize`)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:592
msgid ""
"These fields allow calculating the size in bytes of instances of the type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:594
msgid ""
"There are two kinds of types: types with fixed-length instances have a zero :"
"c:member:`~PyTypeObject.tp_itemsize` field, types with variable-length "
"instances have a non-zero :c:member:`~PyTypeObject.tp_itemsize` field.  For "
"a type with fixed-length instances, all instances have the same size, given "
"in :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:599
msgid ""
"For a type with variable-length instances, the instances must have an :c:"
"member:`~PyVarObject.ob_size` field, and the instance size is :c:member:"
"`~PyTypeObject.tp_basicsize` plus N times :c:member:`~PyTypeObject."
"tp_itemsize`, where N is the \"length\" of the object.  The value of N is "
"typically stored in the instance's :c:member:`~PyVarObject.ob_size` field.  "
"There are exceptions:  for example, ints use a negative :c:member:"
"`~PyVarObject.ob_size` to indicate a negative number, and N is "
"``abs(ob_size)`` there.  Also, the presence of an :c:member:`~PyVarObject."
"ob_size` field in the instance layout doesn't mean that the instance "
"structure is variable-length (for example, the structure for the list type "
"has fixed-length instances, yet those instances have a meaningful :c:member:"
"`~PyVarObject.ob_size` field)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:610
msgid ""
"The basic size includes the fields in the instance declared by the macro :c:"
"macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is used to "
"declare the instance struct) and this in turn includes the  :c:member:"
"`~PyObject._ob_prev` and :c:member:`~PyObject._ob_next` fields if they are "
"present.  This means that the only correct way to get an initializer for "
"the :c:member:`~PyTypeObject.tp_basicsize` is to use the ``sizeof`` operator "
"on the struct used to declare the instance layout. The basic size does not "
"include the GC header size."
msgstr ""

#: ../Doc/c-api/typeobj.rst:618
msgid ""
"A note about alignment: if the variable items require a particular "
"alignment, this should be taken care of by the value of :c:member:"
"`~PyTypeObject.tp_basicsize`.  Example: suppose a type implements an array "
"of ``double``. :c:member:`~PyTypeObject.tp_itemsize` is ``sizeof(double)``. "
"It is the programmer's responsibility that :c:member:`~PyTypeObject."
"tp_basicsize` is a multiple of ``sizeof(double)`` (assuming this is the "
"alignment requirement for ``double``)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:625
msgid ""
"For any type with variable-length instances, this field must not be ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:629
msgid ""
"These fields are inherited separately by subtypes.  If the base type has a "
"non-zero :c:member:`~PyTypeObject.tp_itemsize`, it is generally not safe to "
"set :c:member:`~PyTypeObject.tp_itemsize` to a different non-zero value in a "
"subtype (though this depends on the implementation of the base type)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:637
msgid ""
"A pointer to the instance destructor function.  This function must be "
"defined unless the type guarantees that its instances will never be "
"deallocated (as is the case for the singletons ``None`` and ``Ellipsis``).  "
"The function signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:643
msgid ""
"The destructor function is called by the :c:func:`Py_DECREF` and :c:func:"
"`Py_XDECREF` macros when the new reference count is zero.  At this point, "
"the instance is still in existence, but there are no references to it.  The "
"destructor function should free all references which the instance owns, free "
"all memory buffers owned by the instance (using the freeing function "
"corresponding to the allocation function used to allocate the buffer), and "
"call the type's :c:member:`~PyTypeObject.tp_free` function.  If the type is "
"not subtypable (doesn't have the :c:macro:`Py_TPFLAGS_BASETYPE` flag bit "
"set), it is permissible to call the object deallocator directly instead of "
"via :c:member:`~PyTypeObject.tp_free`.  The object deallocator should be the "
"one used to allocate the instance; this is normally :c:func:`PyObject_Del` "
"if the instance was allocated using :c:macro:`PyObject_New` or :c:macro:"
"`PyObject_NewVar`, or :c:func:`PyObject_GC_Del` if the instance was "
"allocated using :c:macro:`PyObject_GC_New` or :c:macro:`PyObject_GC_NewVar`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:658
msgid ""
"If the type supports garbage collection (has the :c:macro:"
"`Py_TPFLAGS_HAVE_GC` flag bit set), the destructor should call :c:func:"
"`PyObject_GC_UnTrack` before clearing any member fields."
msgstr ""

#: ../Doc/c-api/typeobj.rst:670
msgid ""
"Finally, if the type is heap allocated (:c:macro:`Py_TPFLAGS_HEAPTYPE`), the "
"deallocator should release the owned reference to its type object (via :c:"
"func:`Py_DECREF`)  after calling the type deallocator. In order to avoid "
"dangling pointers, the recommended way to achieve this is:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:693
msgid ""
"An optional offset to a per-instance function that implements calling the "
"object using the :ref:`vectorcall protocol <vectorcall>`, a more efficient "
"alternative of the simpler :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:698
msgid ""
"This field is only used if the flag :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` is "
"set. If so, this must be a positive integer containing the offset in the "
"instance of a :c:type:`vectorcallfunc` pointer."
msgstr ""

#: ../Doc/c-api/typeobj.rst:702
msgid ""
"The *vectorcallfunc* pointer may be ``NULL``, in which case the instance "
"behaves as if :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` was not set: calling the "
"instance falls back to :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:706
msgid ""
"Any class that sets ``Py_TPFLAGS_HAVE_VECTORCALL`` must also set :c:member:"
"`~PyTypeObject.tp_call` and make sure its behaviour is consistent with the "
"*vectorcallfunc* function. This can be done by setting *tp_call* to :c:func:"
"`PyVectorcall_Call`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:713
msgid ""
"Before version 3.8, this slot was named ``tp_print``. In Python 2.x, it was "
"used for printing to a file. In Python 3.0 to 3.7, it was unused."
msgstr ""

#: ../Doc/c-api/typeobj.rst:719
msgid ""
"Before version 3.12, it was not recommended for :ref:`mutable heap types "
"<heap-types>` to implement the vectorcall protocol. When a user sets :attr:"
"`~object.__call__` in Python code, only *tp_call* is updated, likely making "
"it inconsistent with the vectorcall function. Since 3.12, setting "
"``__call__`` will disable vectorcall optimization by clearing the :c:macro:"
"`Py_TPFLAGS_HAVE_VECTORCALL` flag."
msgstr ""

#: ../Doc/c-api/typeobj.rst:729
msgid ""
"This field is always inherited. However, the :c:macro:"
"`Py_TPFLAGS_HAVE_VECTORCALL` flag is not always inherited. If it's not set, "
"then the subclass won't use :ref:`vectorcall <vectorcall>`, except when :c:"
"func:`PyVectorcall_Call` is explicitly called."
msgstr ""

#: ../Doc/c-api/typeobj.rst:738
msgid "An optional pointer to the get-attribute-string function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:740
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :c:member:`~PyTypeObject.tp_getattro` function, "
"but taking a C string instead of a Python string object to give the "
"attribute name."
msgstr ""

#: ../Doc/c-api/typeobj.rst:746 ../Doc/c-api/typeobj.rst:942
msgid ""
"Group: :c:member:`~PyTypeObject.tp_getattr`, :c:member:`~PyTypeObject."
"tp_getattro`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:748
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_getattro`: a subtype inherits both :c:member:`~PyTypeObject.tp_getattr` "
"and :c:member:`~PyTypeObject.tp_getattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject."
"tp_getattro` are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:755 ../Doc/c-api/typeobj.rst:955
msgid ""
"An optional pointer to the function for setting and deleting attributes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:757
msgid ""
"This field is deprecated.  When it is defined, it should point to a function "
"that acts the same as the :c:member:`~PyTypeObject.tp_setattro` function, "
"but taking a C string instead of a Python string object to give the "
"attribute name."
msgstr ""

#: ../Doc/c-api/typeobj.rst:763 ../Doc/c-api/typeobj.rst:968
msgid ""
"Group: :c:member:`~PyTypeObject.tp_setattr`, :c:member:`~PyTypeObject."
"tp_setattro`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:765
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_setattro`: a subtype inherits both :c:member:`~PyTypeObject.tp_setattr` "
"and :c:member:`~PyTypeObject.tp_setattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject."
"tp_setattro` are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:772
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement :term:`awaitable` and :term:`asynchronous iterator` "
"protocols at the C-level.  See :ref:`async-structs` for details."
msgstr ""

#: ../Doc/c-api/typeobj.rst:776
msgid "Formerly known as ``tp_compare`` and ``tp_reserved``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:781
msgid ""
"The :c:member:`~PyTypeObject.tp_as_async` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""

#: ../Doc/c-api/typeobj.rst:789
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`repr`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:792
msgid "The signature is the same as for :c:func:`PyObject_Repr`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:796
msgid ""
"The function must return a string or a Unicode object.  Ideally, this "
"function should return a string that, when passed to :func:`eval`, given a "
"suitable environment, returns an object with the same value.  If this is not "
"feasible, it should return a string starting with ``'<'`` and ending with "
"``'>'`` from which both the type and the value of the object can be deduced."
msgstr ""

#: ../Doc/c-api/typeobj.rst:807 ../Doc/c-api/typeobj.rst:886
#: ../Doc/c-api/typeobj.rst:923 ../Doc/c-api/typeobj.rst:948
#: ../Doc/c-api/typeobj.rst:974 ../Doc/c-api/typeobj.rst:1015
#: ../Doc/c-api/typeobj.rst:1570 ../Doc/c-api/typeobj.rst:1604
#: ../Doc/c-api/typeobj.rst:1721 ../Doc/c-api/typeobj.rst:1754
#: ../Doc/c-api/typeobj.rst:1829 ../Doc/c-api/typeobj.rst:1870
#: ../Doc/c-api/typeobj.rst:1888 ../Doc/c-api/typeobj.rst:1930
#: ../Doc/c-api/typeobj.rst:1951 ../Doc/c-api/typeobj.rst:1982
msgid "**Default:**"
msgstr ""

#: ../Doc/c-api/typeobj.rst:809
msgid ""
"When this field is not set, a string of the form ``<%s object at %p>`` is "
"returned, where ``%s`` is replaced by the type name, and ``%p`` by the "
"object's memory address."
msgstr ""

#: ../Doc/c-api/typeobj.rst:816
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the number protocol.  These fields are documented "
"in :ref:`number-structs`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:822
msgid ""
"The :c:member:`~PyTypeObject.tp_as_number` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""

#: ../Doc/c-api/typeobj.rst:828
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the sequence protocol.  These fields are documented "
"in :ref:`sequence-structs`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:834
msgid ""
"The :c:member:`~PyTypeObject.tp_as_sequence` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""

#: ../Doc/c-api/typeobj.rst:840
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the mapping protocol.  These fields are documented "
"in :ref:`mapping-structs`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:846
msgid ""
"The :c:member:`~PyTypeObject.tp_as_mapping` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""

#: ../Doc/c-api/typeobj.rst:854
msgid ""
"An optional pointer to a function that implements the built-in function :"
"func:`hash`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:857
msgid "The signature is the same as for :c:func:`PyObject_Hash`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:861
msgid ""
"The value ``-1`` should not be returned as a normal return value; when an "
"error occurs during the computation of the hash value, the function should "
"set an exception and return ``-1``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:865
msgid ""
"When this field is not set (*and* :c:member:`~PyTypeObject.tp_richcompare` "
"is not set), an attempt to take the hash of the object raises :exc:"
"`TypeError`. This is the same as setting it to :c:func:"
"`PyObject_HashNotImplemented`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:869
msgid ""
"This field can be set explicitly to :c:func:`PyObject_HashNotImplemented` to "
"block inheritance of the hash method from a parent type. This is interpreted "
"as the equivalent of ``__hash__ = None`` at the Python level, causing "
"``isinstance(o, collections.Hashable)`` to correctly return ``False``. Note "
"that the converse is also true - setting ``__hash__ = None`` on a class at "
"the Python level will result in the ``tp_hash`` slot being set to :c:func:"
"`PyObject_HashNotImplemented`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:879 ../Doc/c-api/typeobj.rst:1563
msgid ""
"Group: :c:member:`~PyTypeObject.tp_hash`, :c:member:`~PyTypeObject."
"tp_richcompare`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:881
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_richcompare`: a subtype inherits both of :c:member:`~PyTypeObject."
"tp_richcompare` and :c:member:`~PyTypeObject.tp_hash`, when the subtype's :c:"
"member:`~PyTypeObject.tp_richcompare` and :c:member:`~PyTypeObject.tp_hash` "
"are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:888
msgid ":c:data:`PyBaseObject_Type` uses :c:func:`PyObject_GenericHash`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:893
msgid ""
"An optional pointer to a function that implements calling the object.  This "
"should be ``NULL`` if the object is not callable.  The signature is the same "
"as for :c:func:`PyObject_Call`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:906
msgid ""
"An optional pointer to a function that implements the built-in operation :"
"func:`str`.  (Note that :class:`str` is a type now, and :func:`str` calls "
"the constructor for that type.  This constructor calls :c:func:"
"`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` will call "
"this handler.)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:911
msgid "The signature is the same as for :c:func:`PyObject_Str`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:915
msgid ""
"The function must return a string or a Unicode object.  It should be a "
"\"friendly\" string representation of the object, as this is the "
"representation that will be used, among other things, by the :func:`print` "
"function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:925
msgid ""
"When this field is not set, :c:func:`PyObject_Repr` is called to return a "
"string representation."
msgstr ""

#: ../Doc/c-api/typeobj.rst:931
msgid "An optional pointer to the get-attribute function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:933
msgid "The signature is the same as for :c:func:`PyObject_GetAttr`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:937
msgid ""
"It is usually convenient to set this field to :c:func:"
"`PyObject_GenericGetAttr`, which implements the normal way of looking for "
"object attributes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:944
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_getattr`: a subtype inherits both :c:member:`~PyTypeObject.tp_getattr` "
"and :c:member:`~PyTypeObject.tp_getattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject."
"tp_getattro` are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:950
msgid ":c:data:`PyBaseObject_Type` uses :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:957
msgid "The signature is the same as for :c:func:`PyObject_SetAttr`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:961
msgid ""
"In addition, setting *value* to ``NULL`` to delete an attribute must be "
"supported.  It is usually convenient to set this field to :c:func:"
"`PyObject_GenericSetAttr`, which implements the normal way of setting object "
"attributes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:970
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_setattr`: a subtype inherits both :c:member:`~PyTypeObject.tp_setattr` "
"and :c:member:`~PyTypeObject.tp_setattro` from its base type when the "
"subtype's :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject."
"tp_setattro` are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:976
msgid ":c:data:`PyBaseObject_Type` uses :c:func:`PyObject_GenericSetAttr`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:981
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the buffer interface.  These fields are documented "
"in :ref:`buffer-structs`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:987
msgid ""
"The :c:member:`~PyTypeObject.tp_as_buffer` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""

#: ../Doc/c-api/typeobj.rst:993
msgid ""
"This field is a bit mask of various flags.  Some flags indicate variant "
"semantics for certain situations; others are used to indicate that certain "
"fields in the type object (or in the extension structures referenced via :c:"
"member:`~PyTypeObject.tp_as_number`, :c:member:`~PyTypeObject."
"tp_as_sequence`, :c:member:`~PyTypeObject.tp_as_mapping`, and :c:member:"
"`~PyTypeObject.tp_as_buffer`) that were historically not always present are "
"valid; if such a flag bit is clear, the type fields it guards must not be "
"accessed and must be considered to have a zero or ``NULL`` value instead."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1003
msgid ""
"Inheritance of this field is complicated.  Most flag bits are inherited "
"individually, i.e. if the base type has a flag bit set, the subtype inherits "
"this flag bit.  The flag bits that pertain to extension structures are "
"strictly inherited if the extension structure is inherited, i.e. the base "
"type's value of the flag bit is copied into the subtype together with a "
"pointer to the extension structure.  The :c:macro:`Py_TPFLAGS_HAVE_GC` flag "
"bit is inherited together with the :c:member:`~PyTypeObject.tp_traverse` "
"and :c:member:`~PyTypeObject.tp_clear` fields, i.e. if the :c:macro:"
"`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the :c:member:"
"`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` fields in "
"the subtype exist and have ``NULL`` values. .. XXX are most flag bits "
"*really* inherited individually?"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1017
msgid ""
":c:data:`PyBaseObject_Type` uses ``Py_TPFLAGS_DEFAULT | "
"Py_TPFLAGS_BASETYPE``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1020
msgid "**Bit Masks:**"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1024
msgid ""
"The following bit masks are currently defined; these can be ORed together "
"using the ``|`` operator to form the value of the :c:member:`~PyTypeObject."
"tp_flags` field.  The macro :c:func:`PyType_HasFeature` takes a type and a "
"flags value, *tp* and *f*, and checks whether ``tp->tp_flags & f`` is non-"
"zero."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1031
msgid ""
"This bit is set when the type object itself is allocated on the heap, for "
"example, types created dynamically using :c:func:`PyType_FromSpec`.  In this "
"case, the :c:member:`~PyObject.ob_type` field of its instances is considered "
"a reference to the type, and the type object is INCREF'ed when a new "
"instance is created, and DECREF'ed when an instance is destroyed (this does "
"not apply to instances of subtypes; only the type referenced by the "
"instance's ob_type gets INCREF'ed or DECREF'ed). Heap types should also :ref:"
"`support garbage collection <supporting-cycle-detection>` as they can form a "
"reference cycle with their own module object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1042 ../Doc/c-api/typeobj.rst:1053
#: ../Doc/c-api/typeobj.rst:1063 ../Doc/c-api/typeobj.rst:1073
#: ../Doc/c-api/typeobj.rst:1105
msgid "???"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1047
msgid ""
"This bit is set when the type can be used as the base type of another type.  "
"If this bit is clear, the type cannot be subtyped (similar to a \"final\" "
"class in Java)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1058
msgid ""
"This bit is set when the type object has been fully initialized by :c:func:"
"`PyType_Ready`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1068
msgid ""
"This bit is set while :c:func:`PyType_Ready` is in the process of "
"initializing the type object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1078
msgid ""
"This bit is set when the object supports garbage collection.  If this bit is "
"set, instances must be created using :c:macro:`PyObject_GC_New` and "
"destroyed using :c:func:`PyObject_GC_Del`.  More information in section :ref:"
"`supporting-cycle-detection`.  This bit also implies that the GC-related "
"fields :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject."
"tp_clear` are present in the type object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1087 ../Doc/c-api/typeobj.rst:1428
#: ../Doc/c-api/typeobj.rst:1502
msgid ""
"Group: :c:macro:`Py_TPFLAGS_HAVE_GC`, :c:member:`~PyTypeObject."
"tp_traverse`, :c:member:`~PyTypeObject.tp_clear`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1089
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the :c:"
"member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` "
"fields, i.e.  if the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the "
"subtype and the :c:member:`~PyTypeObject.tp_traverse` and :c:member:"
"`~PyTypeObject.tp_clear` fields in the subtype exist and have ``NULL`` "
"values."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1099
msgid ""
"This is a bitmask of all the bits that pertain to the existence of certain "
"fields in the type object and its extension structures. Currently, it "
"includes the following bits: :c:macro:`Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1110
msgid "This bit indicates that objects behave like unbound methods."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1112
msgid "If this flag is set for ``type(meth)``, then:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1114
msgid ""
"``meth.__get__(obj, cls)(*args, **kwds)`` (with ``obj`` not None) must be "
"equivalent to ``meth(obj, *args, **kwds)``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1117
msgid ""
"``meth.__get__(None, cls)(*args, **kwds)`` must be equivalent to "
"``meth(*args, **kwds)``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1120
msgid ""
"This flag enables an optimization for typical method calls like ``obj."
"meth()``: it avoids creating a temporary \"bound method\" object for ``obj."
"meth``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1128
msgid ""
"This flag is never inherited by types without the :c:macro:"
"`Py_TPFLAGS_IMMUTABLETYPE` flag set.  For extension types, it is inherited "
"whenever :c:member:`~PyTypeObject.tp_descr_get` is inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1134
msgid ""
"This bit indicates that instances of the class have a ``__dict__`` "
"attribute, and that the space for the dictionary is managed by the VM."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1137
msgid "If this flag is set, :c:macro:`Py_TPFLAGS_HAVE_GC` should also be set."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1139
msgid ""
"The type traverse function must call :c:func:`PyObject_VisitManagedDict` and "
"its clear function must call :c:func:`PyObject_ClearManagedDict`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1146
msgid ""
"This flag is inherited unless the :c:member:`~PyTypeObject.tp_dictoffset` "
"field is set in a superclass."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1152
msgid ""
"This bit indicates that instances of the class should be weakly "
"referenceable."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1159
msgid ""
"This flag is inherited unless the :c:member:`~PyTypeObject."
"tp_weaklistoffset` field is set in a superclass."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1165
msgid ""
"Only usable with variable-size types, i.e. ones with non-zero :c:member:"
"`~PyTypeObject.tp_itemsize`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1168
msgid ""
"Indicates that the variable-sized portion of an instance of this type is at "
"the end of the instance's memory area, at an offset of ``Py_TYPE(obj)-"
">tp_basicsize`` (which may be different in each subclass)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1173
msgid ""
"When setting this flag, be sure that all superclasses either use this memory "
"layout, or are not variable-sized. Python does not check this."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1181
msgid "This flag is inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1195
msgid ""
"These flags are used by functions such as :c:func:`PyLong_Check` to quickly "
"determine if a type is a subclass of a built-in type; such specific checks "
"are faster than a generic check, like :c:func:`PyObject_IsInstance`. Custom "
"types that inherit from built-ins should have their :c:member:`~PyTypeObject."
"tp_flags` set appropriately, or the code that interacts with such types will "
"behave differently depending on what kind of check is used."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1206
msgid ""
"This bit is set when the :c:member:`~PyTypeObject.tp_finalize` slot is "
"present in the type structure."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1211
msgid ""
"This flag isn't necessary anymore, as the interpreter assumes the :c:member:"
"`~PyTypeObject.tp_finalize` slot is always present in the type structure."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1219
msgid ""
"This bit is set when the class implements the :ref:`vectorcall protocol "
"<vectorcall>`. See :c:member:`~PyTypeObject.tp_vectorcall_offset` for "
"details."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1225
msgid ""
"This bit is inherited if :c:member:`~PyTypeObject.tp_call` is also inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1232
msgid ""
"This flag is now removed from a class when the class's :py:meth:`~object."
"__call__` method is reassigned."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1235
msgid "This flag can now be inherited by mutable classes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1239
msgid ""
"This bit is set for type objects that are immutable: type attributes cannot "
"be set nor deleted."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1241
msgid ""
":c:func:`PyType_Ready` automatically applies this flag to :ref:`static types "
"<static-types>`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1246
msgid "This flag is not inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1252
msgid ""
"Disallow creating instances of the type: set :c:member:`~PyTypeObject."
"tp_new` to NULL and don't create the ``__new__`` key in the type dictionary."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1256
msgid ""
"The flag must be set before creating the type, not after. For example, it "
"must be set before :c:func:`PyType_Ready` is called on the type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1259
msgid ""
"The flag is set automatically on :ref:`static types <static-types>` if :c:"
"member:`~PyTypeObject.tp_base` is NULL or ``&PyBaseObject_Type`` and :c:"
"member:`~PyTypeObject.tp_new` is NULL."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1265
msgid ""
"This flag is not inherited. However, subclasses will not be instantiable "
"unless they provide a non-NULL :c:member:`~PyTypeObject.tp_new` (which is "
"only possible via the C API)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1272
msgid ""
"To disallow instantiating a class directly but allow instantiating its "
"subclasses (e.g. for an :term:`abstract base class`), do not use this flag. "
"Instead, make :c:member:`~PyTypeObject.tp_new` only succeed for subclasses."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1283
msgid ""
"This bit indicates that instances of the class may match mapping patterns "
"when used as the subject of a :keyword:`match` block. It is automatically "
"set when registering or subclassing :class:`collections.abc.Mapping`, and "
"unset when registering :class:`collections.abc.Sequence`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1290 ../Doc/c-api/typeobj.rst:1312
msgid ""
":c:macro:`Py_TPFLAGS_MAPPING` and :c:macro:`Py_TPFLAGS_SEQUENCE` are "
"mutually exclusive; it is an error to enable both flags simultaneously."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1295
msgid ""
"This flag is inherited by types that do not already set :c:macro:"
"`Py_TPFLAGS_SEQUENCE`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1298 ../Doc/c-api/typeobj.rst:1320
msgid ":pep:`634` -- Structural Pattern Matching: Specification"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1305
msgid ""
"This bit indicates that instances of the class may match sequence patterns "
"when used as the subject of a :keyword:`match` block. It is automatically "
"set when registering or subclassing :class:`collections.abc.Sequence`, and "
"unset when registering :class:`collections.abc.Mapping`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1317
msgid ""
"This flag is inherited by types that do not already set :c:macro:"
"`Py_TPFLAGS_MAPPING`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1327
msgid ""
"Internal. Do not set or unset this flag. To indicate that a class has "
"changed call :c:func:`PyType_Modified`"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1331
msgid ""
"This flag is present in header files, but is an internal feature and should "
"not be used. It will be removed in a future version of CPython"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1337
msgid ""
"An optional pointer to a NUL-terminated C string giving the docstring for "
"this type object.  This is exposed as the :attr:`__doc__` attribute on the "
"type and instances of the type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1343
msgid "This field is *not* inherited by subtypes."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1348
msgid ""
"An optional pointer to a traversal function for the garbage collector.  This "
"is only used if the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The "
"signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1353 ../Doc/c-api/typeobj.rst:1497
msgid ""
"More information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1356
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` pointer is used by the garbage "
"collector to detect reference cycles. A typical implementation of a :c:"
"member:`~PyTypeObject.tp_traverse` function simply calls :c:func:`Py_VISIT` "
"on each of the instance's members that are Python objects that the instance "
"owns. For example, this is function :c:func:`!local_traverse` from the :mod:"
"`!_thread` extension module::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1371
msgid ""
"Note that :c:func:`Py_VISIT` is called only on those members that can "
"participate in reference cycles.  Although there is also a ``self->key`` "
"member, it can only be ``NULL`` or a Python string and therefore cannot be "
"part of a reference cycle."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1375
msgid ""
"On the other hand, even if you know a member can never be part of a cycle, "
"as a debugging aid you may want to visit it anyway just so the :mod:`gc` "
"module's :func:`~gc.get_referents` function will include it."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1379
msgid ""
"Heap types (:c:macro:`Py_TPFLAGS_HEAPTYPE`) must visit their type with::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1383
msgid ""
"It is only needed since Python 3.9. To support Python 3.8 and older, this "
"line must be conditional::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1390
msgid ""
"If the :c:macro:`Py_TPFLAGS_MANAGED_DICT` bit is set in the :c:member:"
"`~PyTypeObject.tp_flags` field, the traverse function must call :c:func:"
"`PyObject_VisitManagedDict` like this::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1397
msgid ""
"When implementing :c:member:`~PyTypeObject.tp_traverse`, only the members "
"that the instance *owns* (by having :term:`strong references <strong "
"reference>` to them) must be visited. For instance, if an object supports "
"weak references via the :c:member:`~PyTypeObject.tp_weaklist` slot, the "
"pointer supporting the linked list (what *tp_weaklist* points to) must "
"**not** be visited as the instance does not directly own the weak references "
"to itself (the weakreference list is there to support the weak reference "
"machinery, but the instance has no strong reference to the elements inside "
"it, as they are allowed to be removed even if the instance is still alive)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1408
msgid ""
"Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to :c:"
"func:`!local_traverse` to have these specific names; don't name them just "
"anything."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1412
msgid ""
"Instances of :ref:`heap-allocated types <heap-types>` hold a reference to "
"their type. Their traversal function must therefore either visit :c:func:"
"`Py_TYPE(self) <Py_TYPE>`, or delegate this responsibility by calling "
"``tp_traverse`` of another heap-allocated type (such as a heap-allocated "
"superclass). If they do not, the type object may not be garbage-collected."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1421
msgid ""
"Heap-allocated types are expected to visit ``Py_TYPE(self)`` in "
"``tp_traverse``.  In earlier versions of Python, due to `bug 40217 <https://"
"bugs.python.org/issue40217>`_, doing this may lead to crashes in subclasses."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1430
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_clear` and the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :c:"
"member:`~PyTypeObject.tp_traverse`, and :c:member:`~PyTypeObject.tp_clear` "
"are all inherited from the base type if they are all zero in the subtype."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1438
msgid ""
"An optional pointer to a clear function for the garbage collector. This is "
"only used if the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The "
"signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1443
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` member function is used to break "
"reference cycles in cyclic garbage detected by the garbage collector.  Taken "
"together, all :c:member:`~PyTypeObject.tp_clear` functions in the system "
"must combine to break all reference cycles.  This is subtle, and if in any "
"doubt supply a :c:member:`~PyTypeObject.tp_clear` function.  For example, "
"the tuple type does not implement a :c:member:`~PyTypeObject.tp_clear` "
"function, because it's possible to prove that no reference cycle can be "
"composed entirely of tuples. Therefore the :c:member:`~PyTypeObject."
"tp_clear` functions of other types must be sufficient to break any cycle "
"containing a tuple.  This isn't immediately obvious, and there's rarely a "
"good reason to avoid implementing :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1453
msgid ""
"Implementations of :c:member:`~PyTypeObject.tp_clear` should drop the "
"instance's references to those of its members that may be Python objects, "
"and set its pointers to those members to ``NULL``, as in the following "
"example::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1467
msgid ""
"The :c:func:`Py_CLEAR` macro should be used, because clearing references is "
"delicate:  the reference to the contained object must not be released (via :"
"c:func:`Py_DECREF`) until after the pointer to the contained object is set "
"to ``NULL``.  This is because releasing the reference may cause the "
"contained object to become trash, triggering a chain of reclamation activity "
"that may include invoking arbitrary Python code (due to finalizers, or "
"weakref callbacks, associated with the contained object). If it's possible "
"for such code to reference *self* again, it's important that the pointer to "
"the contained object be ``NULL`` at that time, so that *self* knows the "
"contained object can no longer be used.  The :c:func:`Py_CLEAR` macro "
"performs the operations in a safe order."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1479
msgid ""
"If the :c:macro:`Py_TPFLAGS_MANAGED_DICT` bit is set in the :c:member:"
"`~PyTypeObject.tp_flags` field, the traverse function must call :c:func:"
"`PyObject_ClearManagedDict` like this::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1485
msgid ""
"Note that :c:member:`~PyTypeObject.tp_clear` is not *always* called before "
"an instance is deallocated. For example, when reference counting is enough "
"to determine that an object is no longer used, the cyclic garbage collector "
"is not involved and :c:member:`~PyTypeObject.tp_dealloc` is called directly."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1491
msgid ""
"Because the goal of :c:member:`~PyTypeObject.tp_clear` functions is to break "
"reference cycles, it's not necessary to clear contained objects like Python "
"strings or Python integers, which can't participate in reference cycles. On "
"the other hand, it may be convenient to clear all contained Python objects, "
"and write the type's :c:member:`~PyTypeObject.tp_dealloc` function to "
"invoke :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1504
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_traverse` and the :c:macro:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :"
"c:member:`~PyTypeObject.tp_traverse`, and :c:member:`~PyTypeObject.tp_clear` "
"are all inherited from the base type if they are all zero in the subtype."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1512
msgid ""
"An optional pointer to the rich comparison function, whose signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1516
msgid ""
"The first parameter is guaranteed to be an instance of the type that is "
"defined by :c:type:`PyTypeObject`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1519
msgid ""
"The function should return the result of the comparison (usually ``Py_True`` "
"or ``Py_False``).  If the comparison is undefined, it must return "
"``Py_NotImplemented``, if another error occurred it must return ``NULL`` and "
"set an exception condition."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1524
msgid ""
"The following constants are defined to be used as the third argument for :c:"
"member:`~PyTypeObject.tp_richcompare` and for :c:func:`PyObject_RichCompare`:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1530
msgid "Constant"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1530
msgid "Comparison"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1532
msgid "``<``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1534
msgid "``<=``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1536
msgid "``==``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1538
msgid "``!=``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1540
msgid "``>``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1542
msgid "``>=``"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1545
msgid ""
"The following macro is defined to ease writing rich comparison functions:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1549
msgid ""
"Return ``Py_True`` or ``Py_False`` from the function, depending on the "
"result of a comparison. VAL_A and VAL_B must be orderable by C comparison "
"operators (for example, they may be C ints or floats). The third argument "
"specifies the requested operation, as for :c:func:`PyObject_RichCompare`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1555
msgid "The returned value is a new :term:`strong reference`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1557
msgid "On error, sets an exception and returns ``NULL`` from the function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1565
msgid ""
"This field is inherited by subtypes together with :c:member:`~PyTypeObject."
"tp_hash`: a subtype inherits :c:member:`~PyTypeObject.tp_richcompare` and :c:"
"member:`~PyTypeObject.tp_hash` when the subtype's :c:member:`~PyTypeObject."
"tp_richcompare` and :c:member:`~PyTypeObject.tp_hash` are both ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1572
msgid ""
":c:data:`PyBaseObject_Type` provides a :c:member:`~PyTypeObject."
"tp_richcompare` implementation, which may be inherited.  However, if only :c:"
"member:`~PyTypeObject.tp_hash` is defined, not even the inherited function "
"is used and instances of the type will not be able to participate in any "
"comparisons."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1581
msgid ""
"While this field is still supported, :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` "
"should be used instead, if at all possible."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1584
msgid ""
"If the instances of this type are weakly referenceable, this field is "
"greater than zero and contains the offset in the instance structure of the "
"weak reference list head (ignoring the GC header, if present); this offset "
"is used by :c:func:`PyObject_ClearWeakRefs` and the ``PyWeakref_*`` "
"functions.  The instance structure needs to include a field of type :c:expr:"
"`PyObject*` which is initialized to ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1591
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_weaklist`; that "
"is the list head for weak references to the type object itself."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1594
msgid ""
"It is an error to set both the :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` bit "
"and :c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1599
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype uses a "
"different weak reference list head than the base type.  Since the list head "
"is always found via :c:member:`~PyTypeObject.tp_weaklistoffset`, this should "
"not be a problem."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1606
msgid ""
"If the :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` bit is set in the :c:member:"
"`~PyTypeObject.tp_dict` field, then :c:member:`~PyTypeObject."
"tp_weaklistoffset` will be set to a negative value, to indicate that it is "
"unsafe to use this field."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1614
msgid ""
"An optional pointer to a function that returns an :term:`iterator` for the "
"object.  Its presence normally signals that the instances of this type are :"
"term:`iterable` (although sequences may be iterable without this function)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1618
msgid "This function has the same signature as :c:func:`PyObject_GetIter`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1629
msgid ""
"An optional pointer to a function that returns the next item in an :term:"
"`iterator`. The signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1634
msgid ""
"When the iterator is exhausted, it must return ``NULL``; a :exc:"
"`StopIteration` exception may or may not be set.  When another error occurs, "
"it must return ``NULL`` too.  Its presence signals that the instances of "
"this type are iterators."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1639
msgid ""
"Iterator types should also define the :c:member:`~PyTypeObject.tp_iter` "
"function, and that function should return the iterator instance itself (not "
"a new iterator instance)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1643
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1652
msgid ""
"An optional pointer to a static ``NULL``-terminated array of :c:type:"
"`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1655
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a method descriptor."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1660
msgid ""
"This field is not inherited by subtypes (methods are inherited through a "
"different mechanism)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1666
msgid ""
"An optional pointer to a static ``NULL``-terminated array of :c:type:"
"`PyMemberDef` structures, declaring regular data members (fields or slots) "
"of instances of this type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1670
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a member descriptor."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1675
msgid ""
"This field is not inherited by subtypes (members are inherited through a "
"different mechanism)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1681
msgid ""
"An optional pointer to a static ``NULL``-terminated array of :c:type:"
"`PyGetSetDef` structures, declaring computed attributes of instances of this "
"type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1684
msgid ""
"For each entry in the array, an entry is added to the type's dictionary "
"(see :c:member:`~PyTypeObject.tp_dict` below) containing a getset descriptor."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1689
msgid ""
"This field is not inherited by subtypes (computed attributes are inherited "
"through a different mechanism)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1695
msgid ""
"An optional pointer to a base type from which type properties are "
"inherited.  At this level, only single inheritance is supported; multiple "
"inheritance require dynamically creating a type object by calling the "
"metatype."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1703
msgid ""
"Slot initialization is subject to the rules of initializing globals. C99 "
"requires the initializers to be \"address constants\".  Function designators "
"like :c:func:`PyType_GenericNew`, with implicit conversion to a pointer, are "
"valid C99 address constants."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1708
msgid ""
"However, the unary '&' operator applied to a non-static variable like :c:"
"data:`PyBaseObject_Type` is not required to produce an address constant.  "
"Compilers may support this (gcc does), MSVC does not. Both compilers are "
"strictly standard conforming in this particular behavior."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1714
msgid ""
"Consequently, :c:member:`~PyTypeObject.tp_base` should be set in the "
"extension module's init function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1719
msgid "This field is not inherited by subtypes (obviously)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1723
msgid ""
"This field defaults to ``&PyBaseObject_Type`` (which to Python programmers "
"is known as the type :class:`object`)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1729
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1731
msgid ""
"This field should normally be initialized to ``NULL`` before PyType_Ready is "
"called; it may also be initialized to a dictionary containing initial "
"attributes for the type.  Once :c:func:`PyType_Ready` has initialized the "
"type, extra attributes for the type may be added to this dictionary only if "
"they don't correspond to overloaded operations (like :meth:`~object."
"__add__`).  Once initialization for the type has finished, this field should "
"be treated as read-only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1739
msgid ""
"Some types may not store their dictionary in this slot. Use :c:func:"
"`PyType_GetDict` to retrieve the dictionary for an arbitrary type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1745
msgid ""
"Internals detail: For static builtin types, this is always ``NULL``. "
"Instead, the dict for such types is stored on ``PyInterpreterState``. Use :c:"
"func:`PyType_GetDict` to get the dict for an arbitrary type."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1751
msgid ""
"This field is not inherited by subtypes (though the attributes defined in "
"here are inherited through a different mechanism)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1756
msgid ""
"If this field is ``NULL``, :c:func:`PyType_Ready` will assign a new "
"dictionary to it."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1761
msgid ""
"It is not safe to use :c:func:`PyDict_SetItem` on or otherwise modify :c:"
"member:`~PyTypeObject.tp_dict` with the dictionary C-API."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1767
msgid "An optional pointer to a \"descriptor get\" function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1769 ../Doc/c-api/typeobj.rst:1785
#: ../Doc/c-api/typeobj.rst:1849 ../Doc/c-api/typeobj.rst:1879
#: ../Doc/c-api/typeobj.rst:1903
msgid "The function signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1782
msgid ""
"An optional pointer to a function for setting and deleting a descriptor's "
"value."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1789
msgid "The *value* argument is set to ``NULL`` to delete the value."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1800
msgid ""
"While this field is still supported, :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"should be used instead, if at all possible."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1803
msgid ""
"If the instances of this type have a dictionary containing instance "
"variables, this field is non-zero and contains the offset in the instances "
"of the type of the instance variable dictionary; this offset is used by :c:"
"func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1808
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_dict`; that is "
"the dictionary for attributes of the type object itself."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1811
msgid ""
"The value specifies the offset of the dictionary from the start of the "
"instance structure."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1813
msgid ""
"The :c:member:`~PyTypeObject.tp_dictoffset` should be regarded as write-"
"only. To get the pointer to the dictionary call :c:func:"
"`PyObject_GenericGetDict`. Calling :c:func:`PyObject_GenericGetDict` may "
"need to allocate memory for the dictionary, so it is may be more efficient "
"to call :c:func:`PyObject_GetAttr` when accessing an attribute on the object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1819
msgid ""
"It is an error to set both the :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` bit "
"and :c:member:`~PyTypeObject.tp_dictoffset`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1824
msgid ""
"This field is inherited by subtypes. A subtype should not override this "
"offset; doing so could be unsafe, if C code tries to access the dictionary "
"at the previous offset. To properly support inheritance, use :c:macro:"
"`Py_TPFLAGS_MANAGED_DICT`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1831
msgid ""
"This slot has no default.  For :ref:`static types <static-types>`, if the "
"field is ``NULL`` then no :attr:`~object.__dict__` gets created for "
"instances."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1834
msgid ""
"If the :c:macro:`Py_TPFLAGS_MANAGED_DICT` bit is set in the :c:member:"
"`~PyTypeObject.tp_flags` field, then :c:member:`~PyTypeObject.tp_dictoffset` "
"will be set to ``-1``, to indicate that it is unsafe to use this field."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1842
msgid "An optional pointer to an instance initialization function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1844
msgid ""
"This function corresponds to the :meth:`~object.__init__` method of "
"classes.  Like :meth:`!__init__`, it is possible to create an instance "
"without calling :meth:`!__init__`, and it is possible to reinitialize an "
"instance by calling its :meth:`!__init__` method again."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1853
msgid ""
"The self argument is the instance to be initialized; the *args* and *kwds* "
"arguments represent positional and keyword arguments of the call to :meth:"
"`~object.__init__`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1857
msgid ""
"The :c:member:`~PyTypeObject.tp_init` function, if not ``NULL``, is called "
"when an instance is created normally by calling its type, after the type's :"
"c:member:`~PyTypeObject.tp_new` function has returned an instance of the "
"type.  If the :c:member:`~PyTypeObject.tp_new` function returns an instance "
"of some other type that is not a subtype of the original type, no :c:member:"
"`~PyTypeObject.tp_init` function is called; if :c:member:`~PyTypeObject."
"tp_new` returns an instance of a subtype of the original type, the "
"subtype's :c:member:`~PyTypeObject.tp_init` is called."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1864
msgid "Returns ``0`` on success, ``-1`` and sets an exception on error."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1872
msgid ""
"For :ref:`static types <static-types>` this field does not have a default."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1877
msgid "An optional pointer to an instance allocation function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1885
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1890
msgid ""
"For dynamic subtypes, this field is always set to :c:func:"
"`PyType_GenericAlloc`, to force a standard heap allocation strategy."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1894
msgid ""
"For static subtypes, :c:data:`PyBaseObject_Type` uses :c:func:"
"`PyType_GenericAlloc`.  That is the recommended value for all statically "
"defined types."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1901
msgid "An optional pointer to an instance creation function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1907
msgid ""
"The *subtype* argument is the type of the object being created; the *args* "
"and *kwds* arguments represent positional and keyword arguments of the call "
"to the type.  Note that *subtype* doesn't have to equal the type whose :c:"
"member:`~PyTypeObject.tp_new` function is called; it may be a subtype of "
"that type (but not an unrelated type)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1913
msgid ""
"The :c:member:`~PyTypeObject.tp_new` function should call ``subtype-"
">tp_alloc(subtype, nitems)`` to allocate space for the object, and then do "
"only as much further initialization as is absolutely necessary.  "
"Initialization that can safely be ignored or repeated should be placed in "
"the :c:member:`~PyTypeObject.tp_init` handler.  A good rule of thumb is that "
"for immutable types, all initialization should take place in :c:member:"
"`~PyTypeObject.tp_new`, while for mutable types, most initialization should "
"be deferred to :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1921
msgid ""
"Set the :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag to disallow "
"creating instances of the type in Python."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1926
msgid ""
"This field is inherited by subtypes, except it is not inherited by :ref:"
"`static types <static-types>` whose :c:member:`~PyTypeObject.tp_base` is "
"``NULL`` or ``&PyBaseObject_Type``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1932
msgid ""
"For :ref:`static types <static-types>` this field has no default. This means "
"if the slot is defined as ``NULL``, the type cannot be called to create new "
"instances; presumably there is some other way to create instances, like a "
"factory function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1940
msgid ""
"An optional pointer to an instance deallocation function.  Its signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1944
msgid ""
"An initializer that is compatible with this signature is :c:func:"
"`PyObject_Free`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1948
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1953
msgid ""
"In dynamic subtypes, this field is set to a deallocator suitable to match :c:"
"func:`PyType_GenericAlloc` and the value of the :c:macro:"
"`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1957
msgid ""
"For static subtypes, :c:data:`PyBaseObject_Type` uses :c:func:`PyObject_Del`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1962
msgid "An optional pointer to a function called by the garbage collector."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1964
msgid ""
"The garbage collector needs to know whether a particular object is "
"collectible or not.  Normally, it is sufficient to look at the object's "
"type's :c:member:`~PyTypeObject.tp_flags` field, and check the :c:macro:"
"`Py_TPFLAGS_HAVE_GC` flag bit.  But some types have a mixture of statically "
"and dynamically allocated instances, and the statically allocated instances "
"are not collectible.  Such types should define this function; it should "
"return ``1`` for a collectible instance, and ``0`` for a non-collectible "
"instance. The signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1974
msgid ""
"(The only example of this are types themselves.  The metatype, :c:data:"
"`PyType_Type`, defines this function to distinguish between statically and :"
"ref:`dynamically allocated types <heap-types>`.)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:1984
msgid ""
"This slot has no default.  If this field is ``NULL``, :c:macro:"
"`Py_TPFLAGS_HAVE_GC` is used as the functional equivalent."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1990
msgid "Tuple of base types."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1992 ../Doc/c-api/typeobj.rst:2016
msgid ""
"This field should be set to ``NULL`` and treated as read-only. Python will "
"fill it in when the type is :c:func:`initialized <PyType_Ready>`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:1995
msgid ""
"For dynamically created classes, the ``Py_tp_bases`` :c:type:`slot "
"<PyType_Slot>` can be used instead of the *bases* argument of :c:func:"
"`PyType_FromSpecWithBases`. The argument form is preferred."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2002
msgid ""
"Multiple inheritance does not work well for statically defined types. If you "
"set ``tp_bases`` to a tuple, Python will not raise an error, but some slots "
"will only be inherited from the first base."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2008 ../Doc/c-api/typeobj.rst:2031
#: ../Doc/c-api/typeobj.rst:2048 ../Doc/c-api/typeobj.rst:2065
#: ../Doc/c-api/typeobj.rst:2079
msgid "This field is not inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2013
msgid ""
"Tuple containing the expanded set of base types, starting with the type "
"itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2021
msgid ""
"This field is not inherited; it is calculated fresh by :c:func:"
"`PyType_Ready`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2027
msgid "Unused.  Internal use only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2036
msgid ""
"A collection of subclasses.  Internal use only.  May be an invalid pointer."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2038
msgid ""
"To get a list of subclasses, call the Python method :py:meth:`~class."
"__subclasses__`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2043
msgid ""
"For some types, this field does not hold a valid :c:expr:`PyObject*`. The "
"type was changed to :c:expr:`void*` to indicate this."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2053
msgid ""
"Weak reference list head, for weak references to this type object.  Not "
"inherited.  Internal use only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2058
msgid ""
"Internals detail: For the static builtin types this is always ``NULL``, even "
"if weakrefs are added.  Instead, the weakrefs for each are stored on "
"``PyInterpreterState``.  Use the public C-API or the internal "
"``_PyObject_GET_WEAKREFS_LISTPTR()`` macro to avoid the distinction."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2070
msgid ""
"This field is deprecated.  Use :c:member:`~PyTypeObject.tp_finalize` instead."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2075
msgid "Used to index into the method cache.  Internal use only."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2084
msgid ""
"An optional pointer to an instance finalization function.  Its signature is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2088
msgid ""
"If :c:member:`~PyTypeObject.tp_finalize` is set, the interpreter calls it "
"once when finalizing an instance.  It is called either from the garbage "
"collector (if the instance is part of an isolated reference cycle) or just "
"before the object is deallocated.  Either way, it is guaranteed to be called "
"before attempting to break reference cycles, ensuring that it finds the "
"object in a sane state."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2095
msgid ""
":c:member:`~PyTypeObject.tp_finalize` should not mutate the current "
"exception status; therefore, a recommended way to write a non-trivial "
"finalizer is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2112
msgid ""
"Also, note that, in a garbage collected Python, :c:member:`~PyTypeObject."
"tp_dealloc` may be called from any Python thread, not just the thread which "
"created the object (if the object becomes part of a refcount cycle, that "
"cycle might be collected by a garbage collection on any thread).  This is "
"not a problem for Python API calls, since the thread on which tp_dealloc is "
"called will own the Global Interpreter Lock (GIL). However, if the object "
"being destroyed in turn destroys objects from some other C or C++ library, "
"care should be taken to ensure that destroying those objects on the thread "
"which called tp_dealloc will not violate any assumptions of the library."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2131
msgid ""
"Before version 3.8 it was necessary to set the :c:macro:"
"`Py_TPFLAGS_HAVE_FINALIZE` flags bit in order for this field to be used.  "
"This is no longer required."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2135
msgid "\"Safe object finalization\" (:pep:`442`)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2140
msgid ""
"Vectorcall function to use for calls of this type object. In other words, it "
"is used to implement :ref:`vectorcall <vectorcall>` for ``type.__call__``. "
"If ``tp_vectorcall`` is ``NULL``, the default call implementation using :"
"meth:`~object.__new__` and :meth:`~object.__init__` is used."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2148
msgid "This field is never inherited."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2150
msgid "(the field exists since 3.8 but it's only used since 3.9)"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2155
msgid "Internal. Do not use."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2163
msgid "Static Types"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2165
msgid ""
"Traditionally, types defined in C code are *static*, that is, a static :c:"
"type:`PyTypeObject` structure is defined directly in code and initialized "
"using :c:func:`PyType_Ready`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2169
msgid ""
"This results in types that are limited relative to types defined in Python:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2171
msgid ""
"Static types are limited to one base, i.e. they cannot use multiple "
"inheritance."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2173
msgid ""
"Static type objects (but not necessarily their instances) are immutable. It "
"is not possible to add or modify the type object's attributes from Python."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2175
msgid ""
"Static type objects are shared across :ref:`sub-interpreters <sub-"
"interpreter-support>`, so they should not include any subinterpreter-"
"specific state."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2179
msgid ""
"Also, since :c:type:`PyTypeObject` is only part of the :ref:`Limited API "
"<limited-c-api>` as an opaque struct, any extension modules using static "
"types must be compiled for a specific Python minor version."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2187
msgid "Heap Types"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2189
msgid ""
"An alternative to :ref:`static types <static-types>` is *heap-allocated "
"types*, or *heap types* for short, which correspond closely to classes "
"created by Python's ``class`` statement. Heap types have the :c:macro:"
"`Py_TPFLAGS_HEAPTYPE` flag set."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2194
msgid ""
"This is done by filling a :c:type:`PyType_Spec` structure and calling :c:"
"func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases`, :c:func:"
"`PyType_FromModuleAndSpec`, or :c:func:`PyType_FromMetaclass`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2202
msgid "Number Object Structures"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2209
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the number protocol.  Each function is used by the function of "
"similar name documented in the :ref:`number` section."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2215 ../Doc/c-api/typeobj.rst:2539
msgid "Here is the structure definition::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2262
msgid ""
"Binary and ternary functions must check the type of all their operands, and "
"implement the necessary conversions (at least one of the operands is an "
"instance of the defined type).  If the operation is not defined for the "
"given operands, binary and ternary functions must return "
"``Py_NotImplemented``, if another error occurred they must return ``NULL`` "
"and set an exception."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2271
msgid ""
"The :c:member:`~PyNumberMethods.nb_reserved` field should always be "
"``NULL``.  It was previously called :c:member:`!nb_long`, and was renamed in "
"Python 3.0.1."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2316
msgid "Mapping Object Structures"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2323
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the mapping protocol.  It has three members:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2328
msgid ""
"This function is used by :c:func:`PyMapping_Size` and :c:func:"
"`PyObject_Size`, and has the same signature.  This slot may be set to "
"``NULL`` if the object has no defined length."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2334
msgid ""
"This function is used by :c:func:`PyObject_GetItem` and :c:func:"
"`PySequence_GetSlice`, and has the same signature as :c:func:`!"
"PyObject_GetItem`.  This slot must be filled for the :c:func:"
"`PyMapping_Check` function to return ``1``, it can be ``NULL`` otherwise."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2342
msgid ""
"This function is used by :c:func:`PyObject_SetItem`, :c:func:"
"`PyObject_DelItem`, :c:func:`PySequence_SetSlice` and :c:func:"
"`PySequence_DelSlice`.  It has the same signature as :c:func:`!"
"PyObject_SetItem`, but *v* can also be set to ``NULL`` to delete an item.  "
"If this slot is ``NULL``, the object does not support item assignment and "
"deletion."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2353
msgid "Sequence Object Structures"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2360
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the sequence protocol."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2365
msgid ""
"This function is used by :c:func:`PySequence_Size` and :c:func:"
"`PyObject_Size`, and has the same signature.  It is also used for handling "
"negative indices via the :c:member:`~PySequenceMethods.sq_item` and the :c:"
"member:`~PySequenceMethods.sq_ass_item` slots."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2372
msgid ""
"This function is used by :c:func:`PySequence_Concat` and has the same "
"signature.  It is also used by the ``+`` operator, after trying the numeric "
"addition via the :c:member:`~PyNumberMethods.nb_add` slot."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2378
msgid ""
"This function is used by :c:func:`PySequence_Repeat` and has the same "
"signature.  It is also used by the ``*`` operator, after trying numeric "
"multiplication via the :c:member:`~PyNumberMethods.nb_multiply` slot."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2384
msgid ""
"This function is used by :c:func:`PySequence_GetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_GetItem`, after trying the "
"subscription via the :c:member:`~PyMappingMethods.mp_subscript` slot. This "
"slot must be filled for the :c:func:`PySequence_Check` function to return "
"``1``, it can be ``NULL`` otherwise."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2390
msgid ""
"Negative indexes are handled as follows: if the :c:member:"
"`~PySequenceMethods.sq_length` slot is filled, it is called and the sequence "
"length is used to compute a positive index which is passed to  :c:member:"
"`~PySequenceMethods.sq_item`.  If :c:member:`!sq_length` is ``NULL``, the "
"index is passed as is to the function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2397
msgid ""
"This function is used by :c:func:`PySequence_SetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_SetItem` and :c:func:"
"`PyObject_DelItem`, after trying the item assignment and deletion via the :c:"
"member:`~PyMappingMethods.mp_ass_subscript` slot. This slot may be left to "
"``NULL`` if the object does not support item assignment and deletion."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2406
msgid ""
"This function may be used by :c:func:`PySequence_Contains` and has the same "
"signature.  This slot may be left to ``NULL``, in this case :c:func:`!"
"PySequence_Contains` simply traverses the sequence until it finds a match."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2413
msgid ""
"This function is used by :c:func:`PySequence_InPlaceConcat` and has the same "
"signature.  It should modify its first operand, and return it.  This slot "
"may be left to ``NULL``, in this case :c:func:`!PySequence_InPlaceConcat` "
"will fall back to :c:func:`PySequence_Concat`.  It is also used by the "
"augmented assignment ``+=``, after trying numeric in-place addition via the :"
"c:member:`~PyNumberMethods.nb_inplace_add` slot."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2422
msgid ""
"This function is used by :c:func:`PySequence_InPlaceRepeat` and has the same "
"signature.  It should modify its first operand, and return it.  This slot "
"may be left to ``NULL``, in this case :c:func:`!PySequence_InPlaceRepeat` "
"will fall back to :c:func:`PySequence_Repeat`.  It is also used by the "
"augmented assignment ``*=``, after trying numeric in-place multiplication "
"via the :c:member:`~PyNumberMethods.nb_inplace_multiply` slot."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2433
msgid "Buffer Object Structures"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2441
msgid ""
"This structure holds pointers to the functions required by the :ref:`Buffer "
"protocol <bufferobjects>`. The protocol defines how an exporter object can "
"expose its internal data to consumer objects."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2447 ../Doc/c-api/typeobj.rst:2496
#: ../Doc/c-api/typeobj.rst:2550 ../Doc/c-api/typeobj.rst:2561
#: ../Doc/c-api/typeobj.rst:2573 ../Doc/c-api/typeobj.rst:2583
msgid "The signature of this function is::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2451
msgid ""
"Handle a request to *exporter* to fill in *view* as specified by *flags*. "
"Except for point (3), an implementation of this function MUST take these "
"steps:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2455
msgid ""
"Check if the request can be met. If not, raise :exc:`BufferError`, set :c:"
"expr:`view->obj` to ``NULL`` and return ``-1``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2458
msgid "Fill in the requested fields."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2460
msgid "Increment an internal counter for the number of exports."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2462
msgid ""
"Set :c:expr:`view->obj` to *exporter* and increment :c:expr:`view->obj`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2464
msgid "Return ``0``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2466
msgid ""
"If *exporter* is part of a chain or tree of buffer providers, two main "
"schemes can be used:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2469
msgid ""
"Re-export: Each member of the tree acts as the exporting object and sets :c:"
"expr:`view->obj` to a new reference to itself."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2472
msgid ""
"Redirect: The buffer request is redirected to the root object of the tree. "
"Here, :c:expr:`view->obj` will be a new reference to the root object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2476
msgid ""
"The individual fields of *view* are described in section :ref:`Buffer "
"structure <buffer-structure>`, the rules how an exporter must react to "
"specific requests are in section :ref:`Buffer request types <buffer-request-"
"types>`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2481
msgid ""
"All memory pointed to in the :c:type:`Py_buffer` structure belongs to the "
"exporter and must remain valid until there are no consumers left. :c:member:"
"`~Py_buffer.format`, :c:member:`~Py_buffer.shape`, :c:member:`~Py_buffer."
"strides`, :c:member:`~Py_buffer.suboffsets` and :c:member:`~Py_buffer."
"internal` are read-only for the consumer."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2488
msgid ""
":c:func:`PyBuffer_FillInfo` provides an easy way of exposing a simple bytes "
"buffer while dealing correctly with all request types."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2491
msgid ""
":c:func:`PyObject_GetBuffer` is the interface for the consumer that wraps "
"this function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2500
msgid ""
"Handle a request to release the resources of the buffer. If no resources "
"need to be released, :c:member:`PyBufferProcs.bf_releasebuffer` may be "
"``NULL``. Otherwise, a standard implementation of this function will take "
"these optional steps:"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2505
msgid "Decrement an internal counter for the number of exports."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2507
msgid "If the counter is ``0``, free all memory associated with *view*."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2509
msgid ""
"The exporter MUST use the :c:member:`~Py_buffer.internal` field to keep "
"track of buffer-specific resources. This field is guaranteed to remain "
"constant, while a consumer MAY pass a copy of the original buffer as the "
"*view* argument."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2515
msgid ""
"This function MUST NOT decrement :c:expr:`view->obj`, since that is done "
"automatically in :c:func:`PyBuffer_Release` (this scheme is useful for "
"breaking reference cycles)."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2520
msgid ""
":c:func:`PyBuffer_Release` is the interface for the consumer that wraps this "
"function."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2528
msgid "Async Object Structures"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2536
msgid ""
"This structure holds pointers to the functions required to implement :term:"
"`awaitable` and :term:`asynchronous iterator` objects."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2554
msgid ""
"The returned object must be an :term:`iterator`, i.e. :c:func:`PyIter_Check` "
"must return ``1`` for it."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2557
msgid ""
"This slot may be set to ``NULL`` if an object is not an :term:`awaitable`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2565
msgid ""
"Must return an :term:`asynchronous iterator` object. See :meth:`~object."
"__anext__` for details."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2568
msgid ""
"This slot may be set to ``NULL`` if an object does not implement "
"asynchronous iteration protocol."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2577
msgid ""
"Must return an :term:`awaitable` object. See :meth:`~object.__anext__` for "
"details. This slot may be set to ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2587
msgid ""
"See :c:func:`PyIter_Send` for details. This slot may be set to ``NULL``."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2596
msgid "Slot Type typedefs"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2600
msgid ""
"The purpose of this function is to separate memory allocation from memory "
"initialization.  It should return a pointer to a block of memory of adequate "
"length for the instance, suitably aligned, and initialized to zeros, but "
"with :c:member:`~PyObject.ob_refcnt` set to ``1`` and :c:member:`~PyObject."
"ob_type` set to the type argument.  If the type's :c:member:`~PyTypeObject."
"tp_itemsize` is non-zero, the object's :c:member:`~PyVarObject.ob_size` "
"field should be initialized to *nitems* and the length of the allocated "
"memory block should be ``tp_basicsize + nitems*tp_itemsize``, rounded up to "
"a multiple of ``sizeof(void*)``; otherwise, *nitems* is not used and the "
"length of the block should be :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2610
msgid ""
"This function should not do any other instance initialization, not even to "
"allocate additional memory; that should be done by :c:member:`~PyTypeObject."
"tp_new`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2617
msgid "See :c:member:`~PyTypeObject.tp_free`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2621
msgid "See :c:member:`~PyTypeObject.tp_new`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2625
msgid "See :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2629
msgid "See :c:member:`~PyTypeObject.tp_repr`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2633 ../Doc/c-api/typeobj.rst:2642
msgid "Return the value of the named attribute for the object."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2637 ../Doc/c-api/typeobj.rst:2648
msgid ""
"Set the value of the named attribute for the object. The value argument is "
"set to ``NULL`` to delete the attribute."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2644
msgid "See :c:member:`~PyTypeObject.tp_getattro`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2651
msgid "See :c:member:`~PyTypeObject.tp_setattro`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2655
msgid "See :c:member:`~PyTypeObject.tp_descr_get`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2659
msgid "See :c:member:`~PyTypeObject.tp_descr_set`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2663
msgid "See :c:member:`~PyTypeObject.tp_hash`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2667
msgid "See :c:member:`~PyTypeObject.tp_richcompare`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2671
msgid "See :c:member:`~PyTypeObject.tp_iter`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2675
msgid "See :c:member:`~PyTypeObject.tp_iternext`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2689
msgid "See :c:member:`~PyAsyncMethods.am_send`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2705
msgid "Examples"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2707
msgid ""
"The following are simple examples of Python type definitions.  They include "
"common usage you may encounter.  Some demonstrate tricky corner cases.  For "
"more examples, practical info, and a tutorial, see :ref:`defining-new-types` "
"and :ref:`new-types-topics`."
msgstr ""

#: ../Doc/c-api/typeobj.rst:2712
msgid "A basic :ref:`static type <static-types>`::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2729
msgid ""
"You may also find older code (especially in the CPython code base) with a "
"more verbose initializer::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2773
msgid "A type that supports weakrefs, instance dicts, and hashing::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2798
msgid ""
"A str subclass that cannot be subclassed and cannot be called to create "
"instances (e.g. uses a separate factory func) using :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2817
msgid ""
"The simplest :ref:`static type <static-types>` with fixed-length instances::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:2828
msgid ""
"The simplest :ref:`static type <static-types>` with variable-length "
"instances::"
msgstr ""

#: ../Doc/c-api/typeobj.rst:787 ../Doc/c-api/typeobj.rst:852
msgid "built-in function"
msgstr ""

#: ../Doc/c-api/typeobj.rst:787
msgid "repr"
msgstr ""

#: ../Doc/c-api/typeobj.rst:852
msgid "hash"
msgstr ""

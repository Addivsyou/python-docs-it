# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-30 08:10+0200\n"
"PO-Revision-Date: 2024-05-30 14:19+0200\n"
"Last-Translator: Alessandro Cucci <alessandro.cucci@gmail.com>\n"
"Language-Team: \n"
"Language: it_IT\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 2.2.1\n"

#: tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "Editing dell'input interattivo e sostituzione della history"

#: tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"Alcune versioni dell'interprete Python supportano la modifica della riga di "
"input corrente e la sostituzione della history, simili alle funzionalità "
"presenti nella shell Korn e nella shell GNU Bash. Questo è implementato "
"utilizzando la libreria `GNU Readline`_, che supporta vari stili di "
"modifica. Questa libreria ha la sua documentazione che non duplicheremo qui."

#: tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Completamento con il tasto Tab e modifica della history"

#: tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`~object.__getattr__` method is part of the expression.  "
"The default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"Il completamento dei nomi delle variabili e dei moduli è :ref:`automaticamente "
"abilitato <rlcompleter-config>` all'avvio dell'interprete in modo che il "
"tasto :kbd:`Tab` invochi la funzione di completamento; essa esamina i nomi "
"delle istruzioni Python, le variabili locali correnti e i nomi dei moduli "
"disponibili. Per le espressioni puntate come ``string.a``, valuterà "
"l'espressione fino all'ultimo ``'.'`` e quindi suggerirà completamenti dagli "
"attributi dell'oggetto risultante. Nota che questo potrebbe eseguire codice "
"definito dall'applicazione se un oggetto con un metodo :meth:`~object.__getattr__` "
"fa parte dell'espressione. La configurazione predefinita salva anche la tua "
"history in un file chiamato :file:`.python_history` nella tua directory "
"utente. La history sarà disponibile nuovamente durante la prossima "
"sessione dell'interprete interattivo."

#: tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "Alternative all'interprete interattivo"

#: tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"Questa funzionalità è un enorme passo avanti rispetto alle versioni "
"precedenti dell'interprete; tuttavia, alcuni desideri sono rimasti: sarebbe "
"bello se l'indentazione corretta venisse suggerita sulle linee di "
"continuazione (il parser sa se è richiesto un token di indentazione "
"successivo). Il meccanismo di completamento potrebbe utilizzare la tabella "
"dei simboli dell'interprete. Un comando per controllare (o addirittura "
"suggerire) parentesi, virgolette, ecc. corrispondenti, sarebbe anche molto utile."

#: tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"Un'alternativa all'interprete interattivo migliorato che esiste da molto "
"tempo è IPython_, che offre il completamento con il tasto Tab, l'esplorazione "
"degli oggetti e una gestione avanzata della history. Può anche essere "
"personalizzato a fondo e incorporato in altre applicazioni. Un altro ambiente "
"interattivo migliorato simile è bpython_."
